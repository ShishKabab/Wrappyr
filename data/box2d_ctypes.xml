<ctypes>
	<package name="Box2D">
		<library name="Box2DC" path="./libBox2DC.so" default="true" />

		<class name="b2Sweep">
			<method name="__newarray__">
				<call symbol="b2Sweep__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2Sweep__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2Sweep__ArrayElement" />
			</method>
			<method name="Normalize">
				<call symbol="b2Sweep_Normalize" />
			</method>
			<method name="Advance">
				<call symbol="b2Sweep_Advance">
					<argument name="alpha" type="ctypes.c_float" />
				</call>
			</method>
			<method name="GetTransform">
				<call symbol="b2Sweep_GetTransform">
					<argument name="xfb" type="Box2D.b2Transform" />
					<argument name="beta" type="ctypes.c_float" />
				</call>
			</method>
			<member name="localCenter">
				<getter>
					<call symbol="b2Sweep__Get_LocalCenter">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Sweep__Set_LocalCenter">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="c0">
				<getter>
					<call symbol="b2Sweep__Get_C0">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Sweep__Set_C0">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="c">
				<getter>
					<call symbol="b2Sweep__Get_C">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Sweep__Set_C">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="a0">
				<getter>
					<call symbol="b2Sweep__Get_A0">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Sweep__Set_A0">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="a">
				<getter>
					<call symbol="b2Sweep__Get_A">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Sweep__Set_A">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="alpha0">
				<getter>
					<call symbol="b2Sweep__Get_Alpha0">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Sweep__Set_Alpha0">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2ContactEdge">
			<method name="__newarray__">
				<call symbol="b2ContactEdge__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2ContactEdge__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2ContactEdge__ArrayElement" />
			</method>
			<member name="other">
				<getter>
					<call symbol="b2ContactEdge__Get_Other">
						<returns type="Box2D.b2Body" />
					</call>
				</getter>
				<setter>
					<call symbol="b2ContactEdge__Set_Other">
						<argument type="Box2D.b2Body" />
					</call>
				</setter>
			</member>
			<member name="prev">
				<getter>
					<call symbol="b2ContactEdge__Get_Prev">
						<returns type="Box2D.b2ContactEdge" />
					</call>
				</getter>
				<setter>
					<call symbol="b2ContactEdge__Set_Prev">
						<argument type="Box2D.b2ContactEdge" />
					</call>
				</setter>
			</member>
			<member name="next">
				<getter>
					<call symbol="b2ContactEdge__Get_Next">
						<returns type="Box2D.b2ContactEdge" />
					</call>
				</getter>
				<setter>
					<call symbol="b2ContactEdge__Set_Next">
						<argument type="Box2D.b2ContactEdge" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2BroadPhase">
			<method name="__init__">
				<call symbol="b2BroadPhase__Create" />
			</method>
			<method name="__newarray__">
				<call symbol="b2BroadPhase__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2BroadPhase__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2BroadPhase__ArrayElement" />
			</method>
			<method name="GetTreeQuality">
				<call symbol="b2BroadPhase_GetTreeQuality">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetFatAABB">
				<call symbol="b2BroadPhase_GetFatAABB">
					<argument name="proxyId" type="ctypes.c_int" />
					<returns type="Box2D.b2AABB" ownership="0" />
				</call>
			</method>
			<method name="GetUserData">
				<call symbol="b2BroadPhase_GetUserData">
					<argument name="proxyId" type="ctypes.c_int" />
					<returns type="ctypes.c_void_p" ownership="0" />
				</call>
			</method>
			<method name="GetTreeHeight">
				<call symbol="b2BroadPhase_GetTreeHeight">
					<returns type="ctypes.c_int" ownership="0" />
				</call>
			</method>
			<method name="GetProxyCount">
				<call symbol="b2BroadPhase_GetProxyCount">
					<returns type="ctypes.c_int" ownership="0" />
				</call>
			</method>
			<method name="TestOverlap">
				<call symbol="b2BroadPhase_TestOverlap">
					<argument name="proxyIdA" type="ctypes.c_int" />
					<argument name="proxyIdB" type="ctypes.c_int" />
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="TouchProxy">
				<call symbol="b2BroadPhase_TouchProxy">
					<argument name="proxyId" type="ctypes.c_int" />
				</call>
			</method>
			<method name="GetTreeBalance">
				<call symbol="b2BroadPhase_GetTreeBalance">
					<returns type="ctypes.c_int" ownership="0" />
				</call>
			</method>
			<method name="CreateProxy">
				<call symbol="b2BroadPhase_CreateProxy">
					<argument name="aabb" type="Box2D.b2AABB" />
					<argument name="userData" type="ctypes.c_void_p" />
					<returns type="ctypes.c_int" ownership="0" />
				</call>
			</method>
			<method name="MoveProxy">
				<call symbol="b2BroadPhase_MoveProxy">
					<argument name="proxyId" type="ctypes.c_int" />
					<argument name="aabb" type="Box2D.b2AABB" />
					<argument name="displacement" type="Box2D.b2Vec2" />
				</call>
			</method>
			<method name="DestroyProxy">
				<call symbol="b2BroadPhase_DestroyProxy">
					<argument name="proxyId" type="ctypes.c_int" />
				</call>
			</method>
		</class>
		<class name="b2Pair">
			<method name="__newarray__">
				<call symbol="b2Pair__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2Pair__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2Pair__ArrayElement" />
			</method>
			<member name="proxyIdA">
				<getter>
					<call symbol="b2Pair__Get_ProxyIdA">
						<returns type="ctypes.c_int" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Pair__Set_ProxyIdA">
						<argument type="ctypes.c_int" />
					</call>
				</setter>
			</member>
			<member name="proxyIdB">
				<getter>
					<call symbol="b2Pair__Get_ProxyIdB">
						<returns type="ctypes.c_int" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Pair__Set_ProxyIdB">
						<argument type="ctypes.c_int" />
					</call>
				</setter>
			</member>
			<member name="next">
				<getter>
					<call symbol="b2Pair__Get_Next">
						<returns type="ctypes.c_int" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Pair__Set_Next">
						<argument type="ctypes.c_int" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2World">
			<method name="__init__">
				<call symbol="b2World__Create">
					<argument name="gravity" type="Box2D.b2Vec2" />
					<argument name="doSleep" type="ctypes.c_ubyte" />
				</call>
			</method>
			<method name="__delarray__">
				<call symbol="b2World__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2World__ArrayElement" />
			</method>
			<method name="QueryAABB">
				<call symbol="b2World_QueryAABB">
					<argument name="callback" type="Box2D.b2QueryCallback" />
					<argument name="aabb" type="Box2D.b2AABB" />
				</call>
			</method>
			<method name="GetContactList">
				<call symbol="b2World_GetContactList0">
					<returns type="Box2D.b2Contact" ownership="0" />
				</call>
				<call symbol="b2World_GetContactList1">
					<returns type="Box2D.b2Contact" ownership="0" />
				</call>
			</method>
			<method name="GetTreeQuality">
				<call symbol="b2World_GetTreeQuality">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetTreeHeight">
				<call symbol="b2World_GetTreeHeight">
					<returns type="ctypes.c_int" ownership="0" />
				</call>
			</method>
			<method name="GetProfile">
				<call symbol="b2World_GetProfile">
					<returns type="Box2D.b2Profile" ownership="0" />
				</call>
			</method>
			<method name="GetTreeBalance">
				<call symbol="b2World_GetTreeBalance">
					<returns type="ctypes.c_int" ownership="0" />
				</call>
			</method>
			<method name="GetContactManager">
				<call symbol="b2World_GetContactManager">
					<returns type="Box2D.b2ContactManager" ownership="0" />
				</call>
			</method>
			<method name="SetContactListener">
				<call symbol="b2World_SetContactListener">
					<argument name="listener" type="Box2D.b2ContactListener" />
				</call>
			</method>
			<method name="DrawDebugData">
				<call symbol="b2World_DrawDebugData" />
			</method>
			<method name="SetContinuousPhysics">
				<call symbol="b2World_SetContinuousPhysics">
					<argument name="flag" type="ctypes.c_ubyte" />
				</call>
			</method>
			<method name="SetGravity">
				<call symbol="b2World_SetGravity">
					<argument name="gravity" type="Box2D.b2Vec2" />
				</call>
			</method>
			<method name="GetBodyCount">
				<call symbol="b2World_GetBodyCount">
					<returns type="ctypes.c_int" ownership="0" />
				</call>
			</method>
			<method name="GetAutoClearForces">
				<call symbol="b2World_GetAutoClearForces">
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="GetJointList">
				<call symbol="b2World_GetJointList0">
					<returns type="Box2D.b2Joint" ownership="0" />
				</call>
				<call symbol="b2World_GetJointList1">
					<returns type="Box2D.b2Joint" ownership="0" />
				</call>
			</method>
			<method name="CreateBody">
				<call symbol="b2World_CreateBody">
					<argument name="def" type="Box2D.b2BodyDef" />
					<returns type="Box2D.b2Body" ownership="0" />
				</call>
			</method>
			<method name="GetBodyList">
				<call symbol="b2World_GetBodyList0">
					<returns type="Box2D.b2Body" ownership="0" />
				</call>
				<call symbol="b2World_GetBodyList1">
					<returns type="Box2D.b2Body" ownership="0" />
				</call>
			</method>
			<method name="SetDestructionListener">
				<call symbol="b2World_SetDestructionListener">
					<argument name="listener" type="Box2D.b2DestructionListener" />
				</call>
			</method>
			<method name="DestroyJoint">
				<call symbol="b2World_DestroyJoint">
					<argument name="joint" type="Box2D.b2Joint" />
				</call>
			</method>
			<method name="GetJointCount">
				<call symbol="b2World_GetJointCount">
					<returns type="ctypes.c_int" ownership="0" />
				</call>
			</method>
			<method name="Step">
				<call symbol="b2World_Step">
					<argument name="timeStep" type="ctypes.c_float" />
					<argument name="velocityIterations" type="ctypes.c_int" />
					<argument name="positionIterations" type="ctypes.c_int" />
				</call>
			</method>
			<method name="ClearForces">
				<call symbol="b2World_ClearForces" />
			</method>
			<method name="DestroyBody">
				<call symbol="b2World_DestroyBody">
					<argument name="body" type="Box2D.b2Body" />
				</call>
			</method>
			<method name="CreateJoint">
				<call symbol="b2World_CreateJoint">
					<argument name="def" type="Box2D.b2JointDef" />
					<returns type="Box2D.b2Joint" ownership="0" />
				</call>
			</method>
			<method name="GetProxyCount">
				<call symbol="b2World_GetProxyCount">
					<returns type="ctypes.c_int" ownership="0" />
				</call>
			</method>
			<method name="RayCast">
				<call symbol="b2World_RayCast">
					<argument name="callback" type="Box2D.b2RayCastCallback" />
					<argument name="point1" type="Box2D.b2Vec2" />
					<argument name="point2" type="Box2D.b2Vec2" />
				</call>
			</method>
			<method name="IsLocked">
				<call symbol="b2World_IsLocked">
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="SetSubStepping">
				<call symbol="b2World_SetSubStepping">
					<argument name="flag" type="ctypes.c_ubyte" />
				</call>
			</method>
			<method name="SetDebugDraw">
				<call symbol="b2World_SetDebugDraw">
					<argument name="debugDraw" type="Box2D.b2Draw" />
				</call>
			</method>
			<method name="SetAutoClearForces">
				<call symbol="b2World_SetAutoClearForces">
					<argument name="flag" type="ctypes.c_ubyte" />
				</call>
			</method>
			<method name="GetGravity">
				<call symbol="b2World_GetGravity">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetContactCount">
				<call symbol="b2World_GetContactCount">
					<returns type="ctypes.c_int" ownership="0" />
				</call>
			</method>
			<method name="SetWarmStarting">
				<call symbol="b2World_SetWarmStarting">
					<argument name="flag" type="ctypes.c_ubyte" />
				</call>
			</method>
			<method name="SetContactFilter">
				<call symbol="b2World_SetContactFilter">
					<argument name="filter" type="Box2D.b2ContactFilter" />
				</call>
			</method>
		</class>
		<class name="b2CircleShape">
			<method name="__init__">
				<call symbol="b2CircleShape__Create" />
			</method>
			<method name="__newarray__">
				<call symbol="b2CircleShape__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2CircleShape__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2CircleShape__ArrayElement" />
			</method>
			<method name="ComputeMass">
				<call symbol="b2CircleShape_ComputeMass">
					<argument name="massData" type="Box2D.b2MassData" />
					<argument name="density" type="ctypes.c_float" />
				</call>
			</method>
			<method name="GetVertex">
				<call symbol="b2CircleShape_GetVertex">
					<argument name="index" type="ctypes.c_int" />
					<returns type="Box2D.b2Vec2" ownership="0" />
				</call>
			</method>
			<method name="Clone">
				<call symbol="b2CircleShape_Clone">
					<argument name="allocator" type="Box2D.b2BlockAllocator" />
					<returns type="Box2D.b2Shape" ownership="0" />
				</call>
			</method>
			<method name="GetSupportVertex">
				<call symbol="b2CircleShape_GetSupportVertex">
					<argument name="d" type="Box2D.b2Vec2" />
					<returns type="Box2D.b2Vec2" ownership="0" />
				</call>
			</method>
			<method name="RayCast">
				<call symbol="b2CircleShape_RayCast">
					<argument name="output" type="Box2D.b2RayCastOutput" />
					<argument name="input" type="Box2D.b2RayCastInput" />
					<argument name="transform" type="Box2D.b2Transform" />
					<argument name="childIndex" type="ctypes.c_int" />
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="ComputeAABB">
				<call symbol="b2CircleShape_ComputeAABB">
					<argument name="aabb" type="Box2D.b2AABB" />
					<argument name="transform" type="Box2D.b2Transform" />
					<argument name="childIndex" type="ctypes.c_int" />
				</call>
			</method>
			<method name="GetVertexCount">
				<call symbol="b2CircleShape_GetVertexCount">
					<returns type="ctypes.c_int" ownership="0" />
				</call>
			</method>
			<method name="GetChildCount">
				<call symbol="b2CircleShape_GetChildCount">
					<returns type="ctypes.c_int" ownership="0" />
				</call>
			</method>
			<method name="TestPoint">
				<call symbol="b2CircleShape_TestPoint">
					<argument name="transform" type="Box2D.b2Transform" />
					<argument name="p" type="Box2D.b2Vec2" />
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="GetSupport">
				<call symbol="b2CircleShape_GetSupport">
					<argument name="d" type="Box2D.b2Vec2" />
					<returns type="ctypes.c_int" ownership="0" />
				</call>
			</method>
			<member name="m_p">
				<getter>
					<call symbol="b2CircleShape__Get_MP">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2CircleShape__Set_MP">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2Shape">
			<method name="__delarray__">
				<call symbol="b2Shape__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2Shape__ArrayElement" />
			</method>
			<method name="GetType">
				<call symbol="b2Shape_GetType">
					<returns type="ctypes.c_uint" ownership="0" />
				</call>
			</method>
			<member name="m_type">
				<getter>
					<call symbol="b2Shape__Get_MType">
						<returns type="ctypes.c_uint" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Shape__Set_MType">
						<argument type="ctypes.c_uint" />
					</call>
				</setter>
			</member>
			<member name="m_radius">
				<getter>
					<call symbol="b2Shape__Get_MRadius">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Shape__Set_MRadius">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2Draw">
			<method name="__delarray__">
				<call symbol="b2Draw__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2Draw__ArrayElement" />
			</method>
			<method name="AppendFlags">
				<call symbol="b2Draw_AppendFlags">
					<argument name="flags" type="ctypes.c_uint" />
				</call>
			</method>
			<method name="ClearFlags">
				<call symbol="b2Draw_ClearFlags">
					<argument name="flags" type="ctypes.c_uint" />
				</call>
			</method>
			<method name="SetFlags">
				<call symbol="b2Draw_SetFlags">
					<argument name="flags" type="ctypes.c_uint" />
				</call>
			</method>
			<method name="GetFlags">
				<call symbol="b2Draw_GetFlags">
					<returns type="ctypes.c_uint" ownership="0" />
				</call>
			</method>
		</class>
		<class name="b2BodyDef">
			<method name="__init__">
				<call symbol="b2BodyDef__Create" />
			</method>
			<method name="__newarray__">
				<call symbol="b2BodyDef__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2BodyDef__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2BodyDef__ArrayElement" />
			</method>
			<member name="type">
				<getter>
					<call symbol="b2BodyDef__Get_Type">
						<returns type="ctypes.c_uint" />
					</call>
				</getter>
				<setter>
					<call symbol="b2BodyDef__Set_Type">
						<argument type="ctypes.c_uint" />
					</call>
				</setter>
			</member>
			<member name="position">
				<getter>
					<call symbol="b2BodyDef__Get_Position">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2BodyDef__Set_Position">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="angle">
				<getter>
					<call symbol="b2BodyDef__Get_Angle">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2BodyDef__Set_Angle">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="linearVelocity">
				<getter>
					<call symbol="b2BodyDef__Get_LinearVelocity">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2BodyDef__Set_LinearVelocity">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="angularVelocity">
				<getter>
					<call symbol="b2BodyDef__Get_AngularVelocity">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2BodyDef__Set_AngularVelocity">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="linearDamping">
				<getter>
					<call symbol="b2BodyDef__Get_LinearDamping">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2BodyDef__Set_LinearDamping">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="angularDamping">
				<getter>
					<call symbol="b2BodyDef__Get_AngularDamping">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2BodyDef__Set_AngularDamping">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="allowSleep">
				<getter>
					<call symbol="b2BodyDef__Get_AllowSleep">
						<returns type="ctypes.c_ubyte" />
					</call>
				</getter>
				<setter>
					<call symbol="b2BodyDef__Set_AllowSleep">
						<argument type="ctypes.c_ubyte" />
					</call>
				</setter>
			</member>
			<member name="awake">
				<getter>
					<call symbol="b2BodyDef__Get_Awake">
						<returns type="ctypes.c_ubyte" />
					</call>
				</getter>
				<setter>
					<call symbol="b2BodyDef__Set_Awake">
						<argument type="ctypes.c_ubyte" />
					</call>
				</setter>
			</member>
			<member name="fixedRotation">
				<getter>
					<call symbol="b2BodyDef__Get_FixedRotation">
						<returns type="ctypes.c_ubyte" />
					</call>
				</getter>
				<setter>
					<call symbol="b2BodyDef__Set_FixedRotation">
						<argument type="ctypes.c_ubyte" />
					</call>
				</setter>
			</member>
			<member name="bullet">
				<getter>
					<call symbol="b2BodyDef__Get_Bullet">
						<returns type="ctypes.c_ubyte" />
					</call>
				</getter>
				<setter>
					<call symbol="b2BodyDef__Set_Bullet">
						<argument type="ctypes.c_ubyte" />
					</call>
				</setter>
			</member>
			<member name="active">
				<getter>
					<call symbol="b2BodyDef__Get_Active">
						<returns type="ctypes.c_ubyte" />
					</call>
				</getter>
				<setter>
					<call symbol="b2BodyDef__Set_Active">
						<argument type="ctypes.c_ubyte" />
					</call>
				</setter>
			</member>
			<member name="userData">
				<getter>
					<call symbol="b2BodyDef__Get_UserData">
						<returns type="ctypes.c_void_p" />
					</call>
				</getter>
				<setter>
					<call symbol="b2BodyDef__Set_UserData">
						<argument type="ctypes.c_void_p" />
					</call>
				</setter>
			</member>
			<member name="gravityScale">
				<getter>
					<call symbol="b2BodyDef__Get_GravityScale">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2BodyDef__Set_GravityScale">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2TimeStep">
			<method name="__newarray__">
				<call symbol="b2TimeStep__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2TimeStep__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2TimeStep__ArrayElement" />
			</method>
			<member name="dt">
				<getter>
					<call symbol="b2TimeStep__Get_Dt">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2TimeStep__Set_Dt">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="inv_dt">
				<getter>
					<call symbol="b2TimeStep__Get_InvDt">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2TimeStep__Set_InvDt">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="dtRatio">
				<getter>
					<call symbol="b2TimeStep__Get_DtRatio">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2TimeStep__Set_DtRatio">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="velocityIterations">
				<getter>
					<call symbol="b2TimeStep__Get_VelocityIterations">
						<returns type="ctypes.c_int" />
					</call>
				</getter>
				<setter>
					<call symbol="b2TimeStep__Set_VelocityIterations">
						<argument type="ctypes.c_int" />
					</call>
				</setter>
			</member>
			<member name="positionIterations">
				<getter>
					<call symbol="b2TimeStep__Get_PositionIterations">
						<returns type="ctypes.c_int" />
					</call>
				</getter>
				<setter>
					<call symbol="b2TimeStep__Set_PositionIterations">
						<argument type="ctypes.c_int" />
					</call>
				</setter>
			</member>
			<member name="warmStarting">
				<getter>
					<call symbol="b2TimeStep__Get_WarmStarting">
						<returns type="ctypes.c_ubyte" />
					</call>
				</getter>
				<setter>
					<call symbol="b2TimeStep__Set_WarmStarting">
						<argument type="ctypes.c_ubyte" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2StackEntry">
			<method name="__newarray__">
				<call symbol="b2StackEntry__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2StackEntry__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2StackEntry__ArrayElement" />
			</method>
			<member name="data">
				<getter>
					<call symbol="b2StackEntry__Get_Data">
						<returns type="ctypes.c_char_p" />
					</call>
				</getter>
				<setter>
					<call symbol="b2StackEntry__Set_Data">
						<argument type="ctypes.c_char_p" />
					</call>
				</setter>
			</member>
			<member name="size">
				<getter>
					<call symbol="b2StackEntry__Get_Size">
						<returns type="ctypes.c_int" />
					</call>
				</getter>
				<setter>
					<call symbol="b2StackEntry__Set_Size">
						<argument type="ctypes.c_int" />
					</call>
				</setter>
			</member>
			<member name="usedMalloc">
				<getter>
					<call symbol="b2StackEntry__Get_UsedMalloc">
						<returns type="ctypes.c_ubyte" />
					</call>
				</getter>
				<setter>
					<call symbol="b2StackEntry__Set_UsedMalloc">
						<argument type="ctypes.c_ubyte" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2Mat22">
			<method name="__init__">
				<call symbol="b2Mat22__Create0" />
				<call symbol="b2Mat22__Create1">
					<argument name="c1" type="Box2D.b2Vec2" />
					<argument name="c2" type="Box2D.b2Vec2" />
				</call>
				<call symbol="b2Mat22__Create2">
					<argument name="a11" type="ctypes.c_float" />
					<argument name="a12" type="ctypes.c_float" />
					<argument name="a21" type="ctypes.c_float" />
					<argument name="a22" type="ctypes.c_float" />
				</call>
				<call symbol="b2Mat22__Create3">
					<argument name="a" type="Box2D.b2Mat22" />
				</call>
			</method>
			<method name="__newarray__">
				<call symbol="b2Mat22__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2Mat22__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2Mat22__ArrayElement" />
			</method>
			<method name="SetZero">
				<call symbol="b2Mat22_SetZero" />
			</method>
			<method name="GetInverse">
				<call symbol="b2Mat22_GetInverse">
					<returns type="Box2D.b2Mat22" ownership="1" />
				</call>
			</method>
			<method name="Set">
				<call symbol="b2Mat22_Set">
					<argument name="c1" type="Box2D.b2Vec2" />
					<argument name="c2" type="Box2D.b2Vec2" />
				</call>
			</method>
			<method name="Solve">
				<call symbol="b2Mat22_Solve">
					<argument name="b" type="Box2D.b2Vec2" />
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="SetIdentity">
				<call symbol="b2Mat22_SetIdentity" />
			</method>
			<member name="ex">
				<getter>
					<call symbol="b2Mat22__Get_Ex">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Mat22__Set_Ex">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="ey">
				<getter>
					<call symbol="b2Mat22__Get_Ey">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Mat22__Set_Ey">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2TreeNode">
			<method name="__newarray__">
				<call symbol="b2TreeNode__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2TreeNode__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2TreeNode__ArrayElement" />
			</method>
			<method name="IsLeaf">
				<call symbol="b2TreeNode_IsLeaf">
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<member name="aabb">
				<getter>
					<call symbol="b2TreeNode__Get_Aabb">
						<returns type="Box2D.b2AABB" />
					</call>
				</getter>
				<setter>
					<call symbol="b2TreeNode__Set_Aabb">
						<argument type="Box2D.b2AABB" />
					</call>
				</setter>
			</member>
			<member name="userData">
				<getter>
					<call symbol="b2TreeNode__Get_UserData">
						<returns type="ctypes.c_void_p" />
					</call>
				</getter>
				<setter>
					<call symbol="b2TreeNode__Set_UserData">
						<argument type="ctypes.c_void_p" />
					</call>
				</setter>
			</member>
			<member name="child1">
				<getter>
					<call symbol="b2TreeNode__Get_Child1">
						<returns type="ctypes.c_int" />
					</call>
				</getter>
				<setter>
					<call symbol="b2TreeNode__Set_Child1">
						<argument type="ctypes.c_int" />
					</call>
				</setter>
			</member>
			<member name="child2">
				<getter>
					<call symbol="b2TreeNode__Get_Child2">
						<returns type="ctypes.c_int" />
					</call>
				</getter>
				<setter>
					<call symbol="b2TreeNode__Set_Child2">
						<argument type="ctypes.c_int" />
					</call>
				</setter>
			</member>
			<member name="height">
				<getter>
					<call symbol="b2TreeNode__Get_Height">
						<returns type="ctypes.c_int" />
					</call>
				</getter>
				<setter>
					<call symbol="b2TreeNode__Set_Height">
						<argument type="ctypes.c_int" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2Color">
			<method name="__init__">
				<call symbol="b2Color__Create0" />
				<call symbol="b2Color__Create1">
					<argument name="r" type="ctypes.c_float" />
					<argument name="g" type="ctypes.c_float" />
					<argument name="b" type="ctypes.c_float" />
				</call>
			</method>
			<method name="__newarray__">
				<call symbol="b2Color__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2Color__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2Color__ArrayElement" />
			</method>
			<method name="Set">
				<call symbol="b2Color_Set">
					<argument name="ri" type="ctypes.c_float" />
					<argument name="gi" type="ctypes.c_float" />
					<argument name="bi" type="ctypes.c_float" />
				</call>
			</method>
			<member name="r">
				<getter>
					<call symbol="b2Color__Get_R">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Color__Set_R">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="g">
				<getter>
					<call symbol="b2Color__Get_G">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Color__Set_G">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="b">
				<getter>
					<call symbol="b2Color__Get_B">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Color__Set_B">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2PrismaticJoint">
			<method name="__delarray__">
				<call symbol="b2PrismaticJoint__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2PrismaticJoint__ArrayElement" />
			</method>
			<method name="IsMotorEnabled">
				<call symbol="b2PrismaticJoint_IsMotorEnabled">
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="GetMotorSpeed">
				<call symbol="b2PrismaticJoint_GetMotorSpeed">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetAnchorA">
				<call symbol="b2PrismaticJoint_GetAnchorA">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="SetMaxMotorForce">
				<call symbol="b2PrismaticJoint_SetMaxMotorForce">
					<argument name="force" type="ctypes.c_float" />
				</call>
			</method>
			<method name="GetReactionTorque">
				<call symbol="b2PrismaticJoint_GetReactionTorque">
					<argument name="inv_dt" type="ctypes.c_float" />
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetUpperLimit">
				<call symbol="b2PrismaticJoint_GetUpperLimit">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetJointTranslation">
				<call symbol="b2PrismaticJoint_GetJointTranslation">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetMotorForce">
				<call symbol="b2PrismaticJoint_GetMotorForce">
					<argument name="inv_dt" type="ctypes.c_float" />
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetLowerLimit">
				<call symbol="b2PrismaticJoint_GetLowerLimit">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="SetMotorSpeed">
				<call symbol="b2PrismaticJoint_SetMotorSpeed">
					<argument name="speed" type="ctypes.c_float" />
				</call>
			</method>
			<method name="GetAnchorB">
				<call symbol="b2PrismaticJoint_GetAnchorB">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetReactionForce">
				<call symbol="b2PrismaticJoint_GetReactionForce">
					<argument name="inv_dt" type="ctypes.c_float" />
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="SetLimits">
				<call symbol="b2PrismaticJoint_SetLimits">
					<argument name="lower" type="ctypes.c_float" />
					<argument name="upper" type="ctypes.c_float" />
				</call>
			</method>
			<method name="EnableMotor">
				<call symbol="b2PrismaticJoint_EnableMotor">
					<argument name="flag" type="ctypes.c_ubyte" />
				</call>
			</method>
			<method name="GetJointSpeed">
				<call symbol="b2PrismaticJoint_GetJointSpeed">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="IsLimitEnabled">
				<call symbol="b2PrismaticJoint_IsLimitEnabled">
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="EnableLimit">
				<call symbol="b2PrismaticJoint_EnableLimit">
					<argument name="flag" type="ctypes.c_ubyte" />
				</call>
			</method>
		</class>
		<class name="b2RopeJointDef">
			<method name="__init__">
				<call symbol="b2RopeJointDef__Create" />
			</method>
			<method name="__newarray__">
				<call symbol="b2RopeJointDef__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2RopeJointDef__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2RopeJointDef__ArrayElement" />
			</method>
			<member name="localAnchorA">
				<getter>
					<call symbol="b2RopeJointDef__Get_LocalAnchorA">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2RopeJointDef__Set_LocalAnchorA">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="localAnchorB">
				<getter>
					<call symbol="b2RopeJointDef__Get_LocalAnchorB">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2RopeJointDef__Set_LocalAnchorB">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="maxLength">
				<getter>
					<call symbol="b2RopeJointDef__Get_MaxLength">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2RopeJointDef__Set_MaxLength">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2EdgeShape">
			<method name="__init__">
				<call symbol="b2EdgeShape__Create" />
			</method>
			<method name="__newarray__">
				<call symbol="b2EdgeShape__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2EdgeShape__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2EdgeShape__ArrayElement" />
			</method>
			<method name="Set">
				<call symbol="b2EdgeShape_Set">
					<argument name="v1" type="Box2D.b2Vec2" />
					<argument name="v2" type="Box2D.b2Vec2" />
				</call>
			</method>
			<method name="ComputeMass">
				<call symbol="b2EdgeShape_ComputeMass">
					<argument name="massData" type="Box2D.b2MassData" />
					<argument name="density" type="ctypes.c_float" />
				</call>
			</method>
			<method name="Clone">
				<call symbol="b2EdgeShape_Clone">
					<argument name="allocator" type="Box2D.b2BlockAllocator" />
					<returns type="Box2D.b2Shape" ownership="0" />
				</call>
			</method>
			<method name="RayCast">
				<call symbol="b2EdgeShape_RayCast">
					<argument name="output" type="Box2D.b2RayCastOutput" />
					<argument name="input" type="Box2D.b2RayCastInput" />
					<argument name="transform" type="Box2D.b2Transform" />
					<argument name="childIndex" type="ctypes.c_int" />
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="ComputeAABB">
				<call symbol="b2EdgeShape_ComputeAABB">
					<argument name="aabb" type="Box2D.b2AABB" />
					<argument name="transform" type="Box2D.b2Transform" />
					<argument name="childIndex" type="ctypes.c_int" />
				</call>
			</method>
			<method name="GetChildCount">
				<call symbol="b2EdgeShape_GetChildCount">
					<returns type="ctypes.c_int" ownership="0" />
				</call>
			</method>
			<method name="TestPoint">
				<call symbol="b2EdgeShape_TestPoint">
					<argument name="transform" type="Box2D.b2Transform" />
					<argument name="p" type="Box2D.b2Vec2" />
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<member name="m_vertex1">
				<getter>
					<call symbol="b2EdgeShape__Get_MVertex1">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2EdgeShape__Set_MVertex1">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="m_vertex2">
				<getter>
					<call symbol="b2EdgeShape__Get_MVertex2">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2EdgeShape__Set_MVertex2">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="m_vertex0">
				<getter>
					<call symbol="b2EdgeShape__Get_MVertex0">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2EdgeShape__Set_MVertex0">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="m_vertex3">
				<getter>
					<call symbol="b2EdgeShape__Get_MVertex3">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2EdgeShape__Set_MVertex3">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="m_hasVertex0">
				<getter>
					<call symbol="b2EdgeShape__Get_MHasVertex0">
						<returns type="ctypes.c_ubyte" />
					</call>
				</getter>
				<setter>
					<call symbol="b2EdgeShape__Set_MHasVertex0">
						<argument type="ctypes.c_ubyte" />
					</call>
				</setter>
			</member>
			<member name="m_hasVertex3">
				<getter>
					<call symbol="b2EdgeShape__Get_MHasVertex3">
						<returns type="ctypes.c_ubyte" />
					</call>
				</getter>
				<setter>
					<call symbol="b2EdgeShape__Set_MHasVertex3">
						<argument type="ctypes.c_ubyte" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2Vec2">
			<method name="__init__">
				<call symbol="b2Vec2__Create0" />
				<call symbol="b2Vec2__Create1">
					<argument name="x" type="ctypes.c_float" />
					<argument name="y" type="ctypes.c_float" />
				</call>
				<call symbol="b2Vec2__Create2">
					<argument name="a" type="Box2D.b2Vec2" />
				</call>
			</method>
			<method name="__newarray__">
				<call symbol="b2Vec2__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2Vec2__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2Vec2__ArrayElement" />
			</method>
			<method name="Normalize">
				<call symbol="b2Vec2_Normalize">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="LengthSquared">
				<call symbol="b2Vec2_LengthSquared">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="Set">
				<call symbol="b2Vec2_Set">
					<argument name="x_" type="ctypes.c_float" />
					<argument name="y_" type="ctypes.c_float" />
				</call>
			</method>
			<method name="IsValid">
				<call symbol="b2Vec2_IsValid">
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="Skew">
				<call symbol="b2Vec2_Skew">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="SetZero">
				<call symbol="b2Vec2_SetZero" />
			</method>
			<method name="Length">
				<call symbol="b2Vec2_Length">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<member name="x">
				<getter>
					<call symbol="b2Vec2__Get_X">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Vec2__Set_X">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="y">
				<getter>
					<call symbol="b2Vec2__Get_Y">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Vec2__Set_Y">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2TOIOutput">
			<method name="__newarray__">
				<call symbol="b2TOIOutput__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2TOIOutput__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2TOIOutput__ArrayElement" />
			</method>
			<member name="state">
				<getter>
					<call symbol="b2TOIOutput__Get_State">
						<returns type="ctypes.c_uint" />
					</call>
				</getter>
				<setter>
					<call symbol="b2TOIOutput__Set_State">
						<argument type="ctypes.c_uint" />
					</call>
				</setter>
			</member>
			<member name="t">
				<getter>
					<call symbol="b2TOIOutput__Get_T">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2TOIOutput__Set_T">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2Contact">
			<method name="__arrayitem__">
				<call symbol="b2Contact__ArrayElement" />
			</method>
			<method name="GetRestitution">
				<call symbol="b2Contact_GetRestitution">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="SetFriction">
				<call symbol="b2Contact_SetFriction">
					<argument name="friction" type="ctypes.c_float" />
				</call>
			</method>
			<method name="SetRestitution">
				<call symbol="b2Contact_SetRestitution">
					<argument name="restitution" type="ctypes.c_float" />
				</call>
			</method>
			<method name="GetNext">
				<call symbol="b2Contact_GetNext0">
					<returns type="Box2D.b2Contact" ownership="0" />
				</call>
				<call symbol="b2Contact_GetNext1">
					<returns type="Box2D.b2Contact" ownership="0" />
				</call>
			</method>
			<method name="GetFriction">
				<call symbol="b2Contact_GetFriction">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="ResetFriction">
				<call symbol="b2Contact_ResetFriction" />
			</method>
			<method name="IsTouching">
				<call symbol="b2Contact_IsTouching">
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="GetChildIndexA">
				<call symbol="b2Contact_GetChildIndexA">
					<returns type="ctypes.c_int" ownership="0" />
				</call>
			</method>
			<method name="GetChildIndexB">
				<call symbol="b2Contact_GetChildIndexB">
					<returns type="ctypes.c_int" ownership="0" />
				</call>
			</method>
			<method name="GetWorldManifold">
				<call symbol="b2Contact_GetWorldManifold">
					<argument name="worldManifold" type="Box2D.b2WorldManifold" />
				</call>
			</method>
			<method name="IsEnabled">
				<call symbol="b2Contact_IsEnabled">
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="SetEnabled">
				<call symbol="b2Contact_SetEnabled">
					<argument name="flag" type="ctypes.c_ubyte" />
				</call>
			</method>
			<method name="GetFixtureB">
				<call symbol="b2Contact_GetFixtureB0">
					<returns type="Box2D.b2Fixture" ownership="0" />
				</call>
				<call symbol="b2Contact_GetFixtureB1">
					<returns type="Box2D.b2Fixture" ownership="0" />
				</call>
			</method>
			<method name="GetFixtureA">
				<call symbol="b2Contact_GetFixtureA0">
					<returns type="Box2D.b2Fixture" ownership="0" />
				</call>
				<call symbol="b2Contact_GetFixtureA1">
					<returns type="Box2D.b2Fixture" ownership="0" />
				</call>
			</method>
			<method name="GetManifold">
				<call symbol="b2Contact_GetManifold0">
					<returns type="Box2D.b2Manifold" ownership="0" />
				</call>
				<call symbol="b2Contact_GetManifold1">
					<returns type="Box2D.b2Manifold" ownership="0" />
				</call>
			</method>
			<method name="ResetRestitution">
				<call symbol="b2Contact_ResetRestitution" />
			</method>
		</class>
		<class name="b2ClipVertex">
			<method name="__newarray__">
				<call symbol="b2ClipVertex__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2ClipVertex__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2ClipVertex__ArrayElement" />
			</method>
			<member name="v">
				<getter>
					<call symbol="b2ClipVertex__Get_V">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2ClipVertex__Set_V">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2FrictionJointDef">
			<method name="__init__">
				<call symbol="b2FrictionJointDef__Create" />
			</method>
			<method name="__newarray__">
				<call symbol="b2FrictionJointDef__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2FrictionJointDef__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2FrictionJointDef__ArrayElement" />
			</method>
			<method name="Initialize">
				<call symbol="b2FrictionJointDef_Initialize">
					<argument name="bodyA" type="Box2D.b2Body" />
					<argument name="bodyB" type="Box2D.b2Body" />
					<argument name="anchor" type="Box2D.b2Vec2" />
				</call>
			</method>
			<member name="localAnchorA">
				<getter>
					<call symbol="b2FrictionJointDef__Get_LocalAnchorA">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2FrictionJointDef__Set_LocalAnchorA">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="localAnchorB">
				<getter>
					<call symbol="b2FrictionJointDef__Get_LocalAnchorB">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2FrictionJointDef__Set_LocalAnchorB">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="maxForce">
				<getter>
					<call symbol="b2FrictionJointDef__Get_MaxForce">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2FrictionJointDef__Set_MaxForce">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="maxTorque">
				<getter>
					<call symbol="b2FrictionJointDef__Get_MaxTorque">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2FrictionJointDef__Set_MaxTorque">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2Version">
			<method name="__newarray__">
				<call symbol="b2Version__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2Version__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2Version__ArrayElement" />
			</method>
			<member name="major">
				<getter>
					<call symbol="b2Version__Get_Major">
						<returns type="ctypes.c_int" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Version__Set_Major">
						<argument type="ctypes.c_int" />
					</call>
				</setter>
			</member>
			<member name="minor">
				<getter>
					<call symbol="b2Version__Get_Minor">
						<returns type="ctypes.c_int" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Version__Set_Minor">
						<argument type="ctypes.c_int" />
					</call>
				</setter>
			</member>
			<member name="revision">
				<getter>
					<call symbol="b2Version__Get_Revision">
						<returns type="ctypes.c_int" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Version__Set_Revision">
						<argument type="ctypes.c_int" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2Timer">
			<method name="__init__">
				<call symbol="b2Timer__Create" />
			</method>
			<method name="__newarray__">
				<call symbol="b2Timer__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2Timer__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2Timer__ArrayElement" />
			</method>
			<method name="Reset">
				<call symbol="b2Timer_Reset" />
			</method>
			<method name="GetMilliseconds">
				<call symbol="b2Timer_GetMilliseconds">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
		</class>
		<class name="b2DestructionListener">
			<method name="__delarray__">
				<call symbol="b2DestructionListener__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2DestructionListener__ArrayElement" />
			</method>
		</class>
		<class name="b2DistanceOutput">
			<method name="__newarray__">
				<call symbol="b2DistanceOutput__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2DistanceOutput__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2DistanceOutput__ArrayElement" />
			</method>
			<member name="pointA">
				<getter>
					<call symbol="b2DistanceOutput__Get_PointA">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2DistanceOutput__Set_PointA">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="pointB">
				<getter>
					<call symbol="b2DistanceOutput__Get_PointB">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2DistanceOutput__Set_PointB">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="distance">
				<getter>
					<call symbol="b2DistanceOutput__Get_Distance">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2DistanceOutput__Set_Distance">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="iterations">
				<getter>
					<call symbol="b2DistanceOutput__Get_Iterations">
						<returns type="ctypes.c_int" />
					</call>
				</getter>
				<setter>
					<call symbol="b2DistanceOutput__Set_Iterations">
						<argument type="ctypes.c_int" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2ContactManager">
			<method name="__init__">
				<call symbol="b2ContactManager__Create" />
			</method>
			<method name="__newarray__">
				<call symbol="b2ContactManager__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2ContactManager__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2ContactManager__ArrayElement" />
			</method>
			<method name="FindNewContacts">
				<call symbol="b2ContactManager_FindNewContacts" />
			</method>
			<method name="Collide">
				<call symbol="b2ContactManager_Collide" />
			</method>
			<method name="AddPair">
				<call symbol="b2ContactManager_AddPair">
					<argument name="proxyUserDataA" type="ctypes.c_void_p" />
					<argument name="proxyUserDataB" type="ctypes.c_void_p" />
				</call>
			</method>
			<method name="Destroy">
				<call symbol="b2ContactManager_Destroy">
					<argument name="c" type="Box2D.b2Contact" />
				</call>
			</method>
			<member name="m_broadPhase">
				<getter>
					<call symbol="b2ContactManager__Get_MBroadPhase">
						<returns type="Box2D.b2BroadPhase" />
					</call>
				</getter>
				<setter>
					<call symbol="b2ContactManager__Set_MBroadPhase">
						<argument type="Box2D.b2BroadPhase" />
					</call>
				</setter>
			</member>
			<member name="m_contactCount">
				<getter>
					<call symbol="b2ContactManager__Get_MContactCount">
						<returns type="ctypes.c_int" />
					</call>
				</getter>
				<setter>
					<call symbol="b2ContactManager__Set_MContactCount">
						<argument type="ctypes.c_int" />
					</call>
				</setter>
			</member>
			<member name="m_contactFilter">
				<getter>
					<call symbol="b2ContactManager__Get_MContactFilter">
						<returns type="Box2D.b2ContactFilter" />
					</call>
				</getter>
				<setter>
					<call symbol="b2ContactManager__Set_MContactFilter">
						<argument type="Box2D.b2ContactFilter" />
					</call>
				</setter>
			</member>
			<member name="m_contactListener">
				<getter>
					<call symbol="b2ContactManager__Get_MContactListener">
						<returns type="Box2D.b2ContactListener" />
					</call>
				</getter>
				<setter>
					<call symbol="b2ContactManager__Set_MContactListener">
						<argument type="Box2D.b2ContactListener" />
					</call>
				</setter>
			</member>
			<member name="m_allocator">
				<getter>
					<call symbol="b2ContactManager__Get_MAllocator">
						<returns type="Box2D.b2BlockAllocator" />
					</call>
				</getter>
				<setter>
					<call symbol="b2ContactManager__Set_MAllocator">
						<argument type="Box2D.b2BlockAllocator" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2Rot">
			<method name="__init__">
				<call symbol="b2Rot__Create0" />
				<call symbol="b2Rot__Create1">
					<argument name="angle" type="ctypes.c_float" />
				</call>
			</method>
			<method name="__newarray__">
				<call symbol="b2Rot__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2Rot__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2Rot__ArrayElement" />
			</method>
			<method name="Set">
				<call symbol="b2Rot_Set">
					<argument name="angle" type="ctypes.c_float" />
				</call>
			</method>
			<method name="GetXAxis">
				<call symbol="b2Rot_GetXAxis">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="SetIdentity">
				<call symbol="b2Rot_SetIdentity" />
			</method>
			<method name="GetYAxis">
				<call symbol="b2Rot_GetYAxis">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetAngle">
				<call symbol="b2Rot_GetAngle">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<member name="s">
				<getter>
					<call symbol="b2Rot__Get_S">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Rot__Set_S">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="c">
				<getter>
					<call symbol="b2Rot__Get_C">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Rot__Set_C">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2RayCastOutput">
			<method name="__newarray__">
				<call symbol="b2RayCastOutput__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2RayCastOutput__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2RayCastOutput__ArrayElement" />
			</method>
			<member name="normal">
				<getter>
					<call symbol="b2RayCastOutput__Get_Normal">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2RayCastOutput__Set_Normal">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="fraction">
				<getter>
					<call symbol="b2RayCastOutput__Get_Fraction">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2RayCastOutput__Set_Fraction">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2DistanceJointDef">
			<method name="__init__">
				<call symbol="b2DistanceJointDef__Create" />
			</method>
			<method name="__newarray__">
				<call symbol="b2DistanceJointDef__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2DistanceJointDef__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2DistanceJointDef__ArrayElement" />
			</method>
			<method name="Initialize">
				<call symbol="b2DistanceJointDef_Initialize">
					<argument name="bodyA" type="Box2D.b2Body" />
					<argument name="bodyB" type="Box2D.b2Body" />
					<argument name="anchorA" type="Box2D.b2Vec2" />
					<argument name="anchorB" type="Box2D.b2Vec2" />
				</call>
			</method>
			<member name="localAnchorA">
				<getter>
					<call symbol="b2DistanceJointDef__Get_LocalAnchorA">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2DistanceJointDef__Set_LocalAnchorA">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="localAnchorB">
				<getter>
					<call symbol="b2DistanceJointDef__Get_LocalAnchorB">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2DistanceJointDef__Set_LocalAnchorB">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="length">
				<getter>
					<call symbol="b2DistanceJointDef__Get_Length">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2DistanceJointDef__Set_Length">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="frequencyHz">
				<getter>
					<call symbol="b2DistanceJointDef__Get_FrequencyHz">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2DistanceJointDef__Set_FrequencyHz">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="dampingRatio">
				<getter>
					<call symbol="b2DistanceJointDef__Get_DampingRatio">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2DistanceJointDef__Set_DampingRatio">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2Filter">
			<method name="__newarray__">
				<call symbol="b2Filter__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2Filter__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2Filter__ArrayElement" />
			</method>
			<member name="categoryBits">
				<getter>
					<call symbol="b2Filter__Get_CategoryBits">
						<returns type="ctypes.c_ushort" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Filter__Set_CategoryBits">
						<argument type="ctypes.c_ushort" />
					</call>
				</setter>
			</member>
			<member name="maskBits">
				<getter>
					<call symbol="b2Filter__Get_MaskBits">
						<returns type="ctypes.c_ushort" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Filter__Set_MaskBits">
						<argument type="ctypes.c_ushort" />
					</call>
				</setter>
			</member>
			<member name="groupIndex">
				<getter>
					<call symbol="b2Filter__Get_GroupIndex">
						<returns type="ctypes.c_short" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Filter__Set_GroupIndex">
						<argument type="ctypes.c_short" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2PulleyJoint">
			<method name="__delarray__">
				<call symbol="b2PulleyJoint__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2PulleyJoint__ArrayElement" />
			</method>
			<method name="GetAnchorA">
				<call symbol="b2PulleyJoint_GetAnchorA">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetGroundAnchorB">
				<call symbol="b2PulleyJoint_GetGroundAnchorB">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetReactionTorque">
				<call symbol="b2PulleyJoint_GetReactionTorque">
					<argument name="inv_dt" type="ctypes.c_float" />
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetGroundAnchorA">
				<call symbol="b2PulleyJoint_GetGroundAnchorA">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetAnchorB">
				<call symbol="b2PulleyJoint_GetAnchorB">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetReactionForce">
				<call symbol="b2PulleyJoint_GetReactionForce">
					<argument name="inv_dt" type="ctypes.c_float" />
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetLength2">
				<call symbol="b2PulleyJoint_GetLength2">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetLength1">
				<call symbol="b2PulleyJoint_GetLength1">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetRatio">
				<call symbol="b2PulleyJoint_GetRatio">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
		</class>
		<class name="b2Body">
			<method name="__arrayitem__">
				<call symbol="b2Body__ArrayElement" />
			</method>
			<method name="GetAngle">
				<call symbol="b2Body_GetAngle">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetUserData">
				<call symbol="b2Body_GetUserData">
					<returns type="ctypes.c_void_p" ownership="0" />
				</call>
			</method>
			<method name="IsSleepingAllowed">
				<call symbol="b2Body_IsSleepingAllowed">
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="SetAngularDamping">
				<call symbol="b2Body_SetAngularDamping">
					<argument name="angularDamping" type="ctypes.c_float" />
				</call>
			</method>
			<method name="SetActive">
				<call symbol="b2Body_SetActive">
					<argument name="flag" type="ctypes.c_ubyte" />
				</call>
			</method>
			<method name="SetGravityScale">
				<call symbol="b2Body_SetGravityScale">
					<argument name="scale" type="ctypes.c_float" />
				</call>
			</method>
			<method name="SetUserData">
				<call symbol="b2Body_SetUserData">
					<argument name="data" type="ctypes.c_void_p" />
				</call>
			</method>
			<method name="GetAngularVelocity">
				<call symbol="b2Body_GetAngularVelocity">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetFixtureList">
				<call symbol="b2Body_GetFixtureList0">
					<returns type="Box2D.b2Fixture" ownership="0" />
				</call>
				<call symbol="b2Body_GetFixtureList1">
					<returns type="Box2D.b2Fixture" ownership="0" />
				</call>
			</method>
			<method name="ApplyForce">
				<call symbol="b2Body_ApplyForce">
					<argument name="force" type="Box2D.b2Vec2" />
					<argument name="point" type="Box2D.b2Vec2" />
				</call>
			</method>
			<method name="GetLocalPoint">
				<call symbol="b2Body_GetLocalPoint">
					<argument name="worldPoint" type="Box2D.b2Vec2" />
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="SetLinearVelocity">
				<call symbol="b2Body_SetLinearVelocity">
					<argument name="v" type="Box2D.b2Vec2" />
				</call>
			</method>
			<method name="GetJointList">
				<call symbol="b2Body_GetJointList0">
					<returns type="Box2D.b2JointEdge" ownership="0" />
				</call>
				<call symbol="b2Body_GetJointList1">
					<returns type="Box2D.b2JointEdge" ownership="0" />
				</call>
			</method>
			<method name="GetLinearVelocity">
				<call symbol="b2Body_GetLinearVelocity">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetNext">
				<call symbol="b2Body_GetNext0">
					<returns type="Box2D.b2Body" ownership="0" />
				</call>
				<call symbol="b2Body_GetNext1">
					<returns type="Box2D.b2Body" ownership="0" />
				</call>
			</method>
			<method name="SetSleepingAllowed">
				<call symbol="b2Body_SetSleepingAllowed">
					<argument name="flag" type="ctypes.c_ubyte" />
				</call>
			</method>
			<method name="SetTransform">
				<call symbol="b2Body_SetTransform">
					<argument name="position" type="Box2D.b2Vec2" />
					<argument name="angle" type="ctypes.c_float" />
				</call>
			</method>
			<method name="GetMass">
				<call symbol="b2Body_GetMass">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="SetAngularVelocity">
				<call symbol="b2Body_SetAngularVelocity">
					<argument name="omega" type="ctypes.c_float" />
				</call>
			</method>
			<method name="GetMassData">
				<call symbol="b2Body_GetMassData">
					<argument name="data" type="Box2D.b2MassData" />
				</call>
			</method>
			<method name="GetLinearVelocityFromWorldPoint">
				<call symbol="b2Body_GetLinearVelocityFromWorldPoint">
					<argument name="worldPoint" type="Box2D.b2Vec2" />
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="ResetMassData">
				<call symbol="b2Body_ResetMassData" />
			</method>
			<method name="ApplyForceToCenter">
				<call symbol="b2Body_ApplyForceToCenter">
					<argument name="force" type="Box2D.b2Vec2" />
				</call>
			</method>
			<method name="ApplyTorque">
				<call symbol="b2Body_ApplyTorque">
					<argument name="torque" type="ctypes.c_float" />
				</call>
			</method>
			<method name="IsAwake">
				<call symbol="b2Body_IsAwake">
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="SetType">
				<call symbol="b2Body_SetType">
					<argument name="type" type="ctypes.c_uint" />
				</call>
			</method>
			<method name="CreateFixture">
				<call symbol="b2Body_CreateFixture0">
					<argument name="def" type="Box2D.b2FixtureDef" />
					<returns type="Box2D.b2Fixture" ownership="0" />
				</call>
				<call symbol="b2Body_CreateFixture1">
					<argument name="shape" type="Box2D.b2Shape" />
					<argument name="density" type="ctypes.c_float" />
					<returns type="Box2D.b2Fixture" ownership="0" />
				</call>
			</method>
			<method name="SetMassData">
				<call symbol="b2Body_SetMassData">
					<argument name="data" type="Box2D.b2MassData" />
				</call>
			</method>
			<method name="GetTransform">
				<call symbol="b2Body_GetTransform">
					<returns type="Box2D.b2Transform" ownership="0" />
				</call>
			</method>
			<method name="GetWorldCenter">
				<call symbol="b2Body_GetWorldCenter">
					<returns type="Box2D.b2Vec2" ownership="0" />
				</call>
			</method>
			<method name="GetAngularDamping">
				<call symbol="b2Body_GetAngularDamping">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="ApplyLinearImpulse">
				<call symbol="b2Body_ApplyLinearImpulse">
					<argument name="impulse" type="Box2D.b2Vec2" />
					<argument name="point" type="Box2D.b2Vec2" />
				</call>
			</method>
			<method name="IsFixedRotation">
				<call symbol="b2Body_IsFixedRotation">
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="GetLocalCenter">
				<call symbol="b2Body_GetLocalCenter">
					<returns type="Box2D.b2Vec2" ownership="0" />
				</call>
			</method>
			<method name="GetWorldVector">
				<call symbol="b2Body_GetWorldVector">
					<argument name="localVector" type="Box2D.b2Vec2" />
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetLinearVelocityFromLocalPoint">
				<call symbol="b2Body_GetLinearVelocityFromLocalPoint">
					<argument name="localPoint" type="Box2D.b2Vec2" />
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetContactList">
				<call symbol="b2Body_GetContactList0">
					<returns type="Box2D.b2ContactEdge" ownership="0" />
				</call>
				<call symbol="b2Body_GetContactList1">
					<returns type="Box2D.b2ContactEdge" ownership="0" />
				</call>
			</method>
			<method name="GetWorldPoint">
				<call symbol="b2Body_GetWorldPoint">
					<argument name="localPoint" type="Box2D.b2Vec2" />
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="SetAwake">
				<call symbol="b2Body_SetAwake">
					<argument name="flag" type="ctypes.c_ubyte" />
				</call>
			</method>
			<method name="GetLinearDamping">
				<call symbol="b2Body_GetLinearDamping">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="IsBullet">
				<call symbol="b2Body_IsBullet">
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="GetWorld">
				<call symbol="b2Body_GetWorld0">
					<returns type="Box2D.b2World" ownership="0" />
				</call>
				<call symbol="b2Body_GetWorld1">
					<returns type="Box2D.b2World" ownership="0" />
				</call>
			</method>
			<method name="GetLocalVector">
				<call symbol="b2Body_GetLocalVector">
					<argument name="worldVector" type="Box2D.b2Vec2" />
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="SetLinearDamping">
				<call symbol="b2Body_SetLinearDamping">
					<argument name="linearDamping" type="ctypes.c_float" />
				</call>
			</method>
			<method name="SetBullet">
				<call symbol="b2Body_SetBullet">
					<argument name="flag" type="ctypes.c_ubyte" />
				</call>
			</method>
			<method name="GetType">
				<call symbol="b2Body_GetType">
					<returns type="ctypes.c_uint" ownership="0" />
				</call>
			</method>
			<method name="GetGravityScale">
				<call symbol="b2Body_GetGravityScale">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="DestroyFixture">
				<call symbol="b2Body_DestroyFixture">
					<argument name="fixture" type="Box2D.b2Fixture" />
				</call>
			</method>
			<method name="GetInertia">
				<call symbol="b2Body_GetInertia">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="IsActive">
				<call symbol="b2Body_IsActive">
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="SetFixedRotation">
				<call symbol="b2Body_SetFixedRotation">
					<argument name="flag" type="ctypes.c_ubyte" />
				</call>
			</method>
			<method name="ApplyAngularImpulse">
				<call symbol="b2Body_ApplyAngularImpulse">
					<argument name="impulse" type="ctypes.c_float" />
				</call>
			</method>
			<method name="GetPosition">
				<call symbol="b2Body_GetPosition">
					<returns type="Box2D.b2Vec2" ownership="0" />
				</call>
			</method>
		</class>
		<class name="b2SolverData">
			<method name="__newarray__">
				<call symbol="b2SolverData__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2SolverData__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2SolverData__ArrayElement" />
			</method>
			<member name="step">
				<getter>
					<call symbol="b2SolverData__Get_Step">
						<returns type="Box2D.b2TimeStep" />
					</call>
				</getter>
				<setter>
					<call symbol="b2SolverData__Set_Step">
						<argument type="Box2D.b2TimeStep" />
					</call>
				</setter>
			</member>
			<member name="positions">
				<getter>
					<call symbol="b2SolverData__Get_Positions">
						<returns type="Box2D.b2Position" />
					</call>
				</getter>
				<setter>
					<call symbol="b2SolverData__Set_Positions">
						<argument type="Box2D.b2Position" />
					</call>
				</setter>
			</member>
			<member name="velocities">
				<getter>
					<call symbol="b2SolverData__Get_Velocities">
						<returns type="Box2D.b2Velocity" />
					</call>
				</getter>
				<setter>
					<call symbol="b2SolverData__Set_Velocities">
						<argument type="Box2D.b2Velocity" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2WheelJoint">
			<method name="__delarray__">
				<call symbol="b2WheelJoint__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2WheelJoint__ArrayElement" />
			</method>
			<method name="IsMotorEnabled">
				<call symbol="b2WheelJoint_IsMotorEnabled">
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="GetMotorSpeed">
				<call symbol="b2WheelJoint_GetMotorSpeed">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetAnchorA">
				<call symbol="b2WheelJoint_GetAnchorA">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetReactionTorque">
				<call symbol="b2WheelJoint_GetReactionTorque">
					<argument name="inv_dt" type="ctypes.c_float" />
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="SetSpringDampingRatio">
				<call symbol="b2WheelJoint_SetSpringDampingRatio">
					<argument name="ratio" type="ctypes.c_float" />
				</call>
			</method>
			<method name="GetSpringFrequencyHz">
				<call symbol="b2WheelJoint_GetSpringFrequencyHz">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetJointTranslation">
				<call symbol="b2WheelJoint_GetJointTranslation">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetSpringDampingRatio">
				<call symbol="b2WheelJoint_GetSpringDampingRatio">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="SetMaxMotorTorque">
				<call symbol="b2WheelJoint_SetMaxMotorTorque">
					<argument name="torque" type="ctypes.c_float" />
				</call>
			</method>
			<method name="SetSpringFrequencyHz">
				<call symbol="b2WheelJoint_SetSpringFrequencyHz">
					<argument name="hz" type="ctypes.c_float" />
				</call>
			</method>
			<method name="SetMotorSpeed">
				<call symbol="b2WheelJoint_SetMotorSpeed">
					<argument name="speed" type="ctypes.c_float" />
				</call>
			</method>
			<method name="GetAnchorB">
				<call symbol="b2WheelJoint_GetAnchorB">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetReactionForce">
				<call symbol="b2WheelJoint_GetReactionForce">
					<argument name="inv_dt" type="ctypes.c_float" />
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetMotorTorque">
				<call symbol="b2WheelJoint_GetMotorTorque">
					<argument name="inv_dt" type="ctypes.c_float" />
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetJointSpeed">
				<call symbol="b2WheelJoint_GetJointSpeed">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetMaxMotorTorque">
				<call symbol="b2WheelJoint_GetMaxMotorTorque">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="EnableMotor">
				<call symbol="b2WheelJoint_EnableMotor">
					<argument name="flag" type="ctypes.c_ubyte" />
				</call>
			</method>
		</class>
		<class name="b2ContactImpulse">
			<method name="__newarray__">
				<call symbol="b2ContactImpulse__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2ContactImpulse__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2ContactImpulse__ArrayElement" />
			</method>
		</class>
		<class name="b2PulleyJointDef">
			<method name="__init__">
				<call symbol="b2PulleyJointDef__Create" />
			</method>
			<method name="__newarray__">
				<call symbol="b2PulleyJointDef__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2PulleyJointDef__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2PulleyJointDef__ArrayElement" />
			</method>
			<method name="Initialize">
				<call symbol="b2PulleyJointDef_Initialize">
					<argument name="bodyA" type="Box2D.b2Body" />
					<argument name="bodyB" type="Box2D.b2Body" />
					<argument name="groundAnchorA" type="Box2D.b2Vec2" />
					<argument name="groundAnchorB" type="Box2D.b2Vec2" />
					<argument name="anchorA" type="Box2D.b2Vec2" />
					<argument name="anchorB" type="Box2D.b2Vec2" />
					<argument name="ratio" type="ctypes.c_float" />
				</call>
			</method>
			<member name="groundAnchorA">
				<getter>
					<call symbol="b2PulleyJointDef__Get_GroundAnchorA">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2PulleyJointDef__Set_GroundAnchorA">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="groundAnchorB">
				<getter>
					<call symbol="b2PulleyJointDef__Get_GroundAnchorB">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2PulleyJointDef__Set_GroundAnchorB">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="localAnchorA">
				<getter>
					<call symbol="b2PulleyJointDef__Get_LocalAnchorA">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2PulleyJointDef__Set_LocalAnchorA">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="localAnchorB">
				<getter>
					<call symbol="b2PulleyJointDef__Get_LocalAnchorB">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2PulleyJointDef__Set_LocalAnchorB">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="lengthA">
				<getter>
					<call symbol="b2PulleyJointDef__Get_LengthA">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2PulleyJointDef__Set_LengthA">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="lengthB">
				<getter>
					<call symbol="b2PulleyJointDef__Get_LengthB">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2PulleyJointDef__Set_LengthB">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="ratio">
				<getter>
					<call symbol="b2PulleyJointDef__Get_Ratio">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2PulleyJointDef__Set_Ratio">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2TOIInput">
			<method name="__newarray__">
				<call symbol="b2TOIInput__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2TOIInput__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2TOIInput__ArrayElement" />
			</method>
			<member name="proxyA">
				<getter>
					<call symbol="b2TOIInput__Get_ProxyA">
						<returns type="Box2D.b2DistanceProxy" />
					</call>
				</getter>
				<setter>
					<call symbol="b2TOIInput__Set_ProxyA">
						<argument type="Box2D.b2DistanceProxy" />
					</call>
				</setter>
			</member>
			<member name="proxyB">
				<getter>
					<call symbol="b2TOIInput__Get_ProxyB">
						<returns type="Box2D.b2DistanceProxy" />
					</call>
				</getter>
				<setter>
					<call symbol="b2TOIInput__Set_ProxyB">
						<argument type="Box2D.b2DistanceProxy" />
					</call>
				</setter>
			</member>
			<member name="sweepA">
				<getter>
					<call symbol="b2TOIInput__Get_SweepA">
						<returns type="Box2D.b2Sweep" />
					</call>
				</getter>
				<setter>
					<call symbol="b2TOIInput__Set_SweepA">
						<argument type="Box2D.b2Sweep" />
					</call>
				</setter>
			</member>
			<member name="sweepB">
				<getter>
					<call symbol="b2TOIInput__Get_SweepB">
						<returns type="Box2D.b2Sweep" />
					</call>
				</getter>
				<setter>
					<call symbol="b2TOIInput__Set_SweepB">
						<argument type="Box2D.b2Sweep" />
					</call>
				</setter>
			</member>
			<member name="tMax">
				<getter>
					<call symbol="b2TOIInput__Get_TMax">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2TOIInput__Set_TMax">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2AABB">
			<method name="__newarray__">
				<call symbol="b2AABB__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2AABB__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2AABB__ArrayElement" />
			</method>
			<method name="IsValid">
				<call symbol="b2AABB_IsValid">
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="Contains">
				<call symbol="b2AABB_Contains">
					<argument name="aabb" type="Box2D.b2AABB" />
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="GetExtents">
				<call symbol="b2AABB_GetExtents">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetCenter">
				<call symbol="b2AABB_GetCenter">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetPerimeter">
				<call symbol="b2AABB_GetPerimeter">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="Combine">
				<call symbol="b2AABB_Combine0">
					<argument name="aabb" type="Box2D.b2AABB" />
				</call>
				<call symbol="b2AABB_Combine1">
					<argument name="aabb1" type="Box2D.b2AABB" />
					<argument name="aabb2" type="Box2D.b2AABB" />
				</call>
			</method>
			<method name="RayCast">
				<call symbol="b2AABB_RayCast">
					<argument name="output" type="Box2D.b2RayCastOutput" />
					<argument name="input" type="Box2D.b2RayCastInput" />
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<member name="lowerBound">
				<getter>
					<call symbol="b2AABB__Get_LowerBound">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2AABB__Set_LowerBound">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="upperBound">
				<getter>
					<call symbol="b2AABB__Get_UpperBound">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2AABB__Set_UpperBound">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2Mat33">
			<method name="__init__">
				<call symbol="b2Mat33__Create0" />
				<call symbol="b2Mat33__Create1">
					<argument name="c1" type="Box2D.b2Vec3" />
					<argument name="c2" type="Box2D.b2Vec3" />
					<argument name="c3" type="Box2D.b2Vec3" />
				</call>
			</method>
			<method name="__newarray__">
				<call symbol="b2Mat33__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2Mat33__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2Mat33__ArrayElement" />
			</method>
			<method name="SetZero">
				<call symbol="b2Mat33_SetZero" />
			</method>
			<method name="Solve33">
				<call symbol="b2Mat33_Solve33">
					<argument name="b" type="Box2D.b2Vec3" />
					<returns type="Box2D.b2Vec3" ownership="1" />
				</call>
			</method>
			<method name="Solve22">
				<call symbol="b2Mat33_Solve22">
					<argument name="b" type="Box2D.b2Vec2" />
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<member name="ex">
				<getter>
					<call symbol="b2Mat33__Get_Ex">
						<returns type="Box2D.b2Vec3" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Mat33__Set_Ex">
						<argument type="Box2D.b2Vec3" />
					</call>
				</setter>
			</member>
			<member name="ey">
				<getter>
					<call symbol="b2Mat33__Get_Ey">
						<returns type="Box2D.b2Vec3" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Mat33__Set_Ey">
						<argument type="Box2D.b2Vec3" />
					</call>
				</setter>
			</member>
			<member name="ez">
				<getter>
					<call symbol="b2Mat33__Get_Ez">
						<returns type="Box2D.b2Vec3" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Mat33__Set_Ez">
						<argument type="Box2D.b2Vec3" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2RevoluteJoint">
			<method name="__delarray__">
				<call symbol="b2RevoluteJoint__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2RevoluteJoint__ArrayElement" />
			</method>
			<method name="IsMotorEnabled">
				<call symbol="b2RevoluteJoint_IsMotorEnabled">
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="GetMotorSpeed">
				<call symbol="b2RevoluteJoint_GetMotorSpeed">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetReactionTorque">
				<call symbol="b2RevoluteJoint_GetReactionTorque">
					<argument name="inv_dt" type="ctypes.c_float" />
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetReactionForce">
				<call symbol="b2RevoluteJoint_GetReactionForce">
					<argument name="inv_dt" type="ctypes.c_float" />
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetUpperLimit">
				<call symbol="b2RevoluteJoint_GetUpperLimit">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetMotorTorque">
				<call symbol="b2RevoluteJoint_GetMotorTorque">
					<argument name="inv_dt" type="ctypes.c_float" />
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="SetMaxMotorTorque">
				<call symbol="b2RevoluteJoint_SetMaxMotorTorque">
					<argument name="torque" type="ctypes.c_float" />
				</call>
			</method>
			<method name="GetLowerLimit">
				<call symbol="b2RevoluteJoint_GetLowerLimit">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="SetMotorSpeed">
				<call symbol="b2RevoluteJoint_SetMotorSpeed">
					<argument name="speed" type="ctypes.c_float" />
				</call>
			</method>
			<method name="GetJointAngle">
				<call symbol="b2RevoluteJoint_GetJointAngle">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="EnableLimit">
				<call symbol="b2RevoluteJoint_EnableLimit">
					<argument name="flag" type="ctypes.c_ubyte" />
				</call>
			</method>
			<method name="GetAnchorA">
				<call symbol="b2RevoluteJoint_GetAnchorA">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="SetLimits">
				<call symbol="b2RevoluteJoint_SetLimits">
					<argument name="lower" type="ctypes.c_float" />
					<argument name="upper" type="ctypes.c_float" />
				</call>
			</method>
			<method name="EnableMotor">
				<call symbol="b2RevoluteJoint_EnableMotor">
					<argument name="flag" type="ctypes.c_ubyte" />
				</call>
			</method>
			<method name="GetJointSpeed">
				<call symbol="b2RevoluteJoint_GetJointSpeed">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="IsLimitEnabled">
				<call symbol="b2RevoluteJoint_IsLimitEnabled">
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="GetAnchorB">
				<call symbol="b2RevoluteJoint_GetAnchorB">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
		</class>
		<class name="b2FixtureProxy">
			<method name="__newarray__">
				<call symbol="b2FixtureProxy__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2FixtureProxy__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2FixtureProxy__ArrayElement" />
			</method>
			<member name="aabb">
				<getter>
					<call symbol="b2FixtureProxy__Get_Aabb">
						<returns type="Box2D.b2AABB" />
					</call>
				</getter>
				<setter>
					<call symbol="b2FixtureProxy__Set_Aabb">
						<argument type="Box2D.b2AABB" />
					</call>
				</setter>
			</member>
			<member name="childIndex">
				<getter>
					<call symbol="b2FixtureProxy__Get_ChildIndex">
						<returns type="ctypes.c_int" />
					</call>
				</getter>
				<setter>
					<call symbol="b2FixtureProxy__Set_ChildIndex">
						<argument type="ctypes.c_int" />
					</call>
				</setter>
			</member>
			<member name="proxyId">
				<getter>
					<call symbol="b2FixtureProxy__Get_ProxyId">
						<returns type="ctypes.c_int" />
					</call>
				</getter>
				<setter>
					<call symbol="b2FixtureProxy__Set_ProxyId">
						<argument type="ctypes.c_int" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2DynamicTree">
			<method name="__init__">
				<call symbol="b2DynamicTree__Create" />
			</method>
			<method name="__newarray__">
				<call symbol="b2DynamicTree__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2DynamicTree__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2DynamicTree__ArrayElement" />
			</method>
			<method name="GetFatAABB">
				<call symbol="b2DynamicTree_GetFatAABB">
					<argument name="proxyId" type="ctypes.c_int" />
					<returns type="Box2D.b2AABB" ownership="0" />
				</call>
			</method>
			<method name="GetUserData">
				<call symbol="b2DynamicTree_GetUserData">
					<argument name="proxyId" type="ctypes.c_int" />
					<returns type="ctypes.c_void_p" ownership="0" />
				</call>
			</method>
			<method name="GetMaxBalance">
				<call symbol="b2DynamicTree_GetMaxBalance">
					<returns type="ctypes.c_int" ownership="0" />
				</call>
			</method>
			<method name="GetHeight">
				<call symbol="b2DynamicTree_GetHeight">
					<returns type="ctypes.c_int" ownership="0" />
				</call>
			</method>
			<method name="GetAreaRatio">
				<call symbol="b2DynamicTree_GetAreaRatio">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="RebuildBottomUp">
				<call symbol="b2DynamicTree_RebuildBottomUp" />
			</method>
			<method name="CreateProxy">
				<call symbol="b2DynamicTree_CreateProxy">
					<argument name="aabb" type="Box2D.b2AABB" />
					<argument name="userData" type="ctypes.c_void_p" />
					<returns type="ctypes.c_int" ownership="0" />
				</call>
			</method>
			<method name="MoveProxy">
				<call symbol="b2DynamicTree_MoveProxy">
					<argument name="proxyId" type="ctypes.c_int" />
					<argument name="aabb1" type="Box2D.b2AABB" />
					<argument name="displacement" type="Box2D.b2Vec2" />
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="Validate">
				<call symbol="b2DynamicTree_Validate" />
			</method>
			<method name="DestroyProxy">
				<call symbol="b2DynamicTree_DestroyProxy">
					<argument name="proxyId" type="ctypes.c_int" />
				</call>
			</method>
		</class>
		<class name="b2RopeDef">
			<method name="__init__">
				<call symbol="b2RopeDef__Create" />
			</method>
			<method name="__newarray__">
				<call symbol="b2RopeDef__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2RopeDef__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2RopeDef__ArrayElement" />
			</method>
			<member name="vertices">
				<getter>
					<call symbol="b2RopeDef__Get_Vertices">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2RopeDef__Set_Vertices">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="count">
				<getter>
					<call symbol="b2RopeDef__Get_Count">
						<returns type="ctypes.c_int" />
					</call>
				</getter>
				<setter>
					<call symbol="b2RopeDef__Set_Count">
						<argument type="ctypes.c_int" />
					</call>
				</setter>
			</member>
			<member name="masses">
				<getter>
					<call symbol="b2RopeDef__Get_Masses">
						<returns type="ctypes.c_void_p" />
					</call>
				</getter>
				<setter>
					<call symbol="b2RopeDef__Set_Masses">
						<argument type="ctypes.c_void_p" />
					</call>
				</setter>
			</member>
			<member name="gravity">
				<getter>
					<call symbol="b2RopeDef__Get_Gravity">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2RopeDef__Set_Gravity">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="damping">
				<getter>
					<call symbol="b2RopeDef__Get_Damping">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2RopeDef__Set_Damping">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="k2">
				<getter>
					<call symbol="b2RopeDef__Get_K2">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2RopeDef__Set_K2">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="k3">
				<getter>
					<call symbol="b2RopeDef__Get_K3">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2RopeDef__Set_K3">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2QueryCallback">
			<method name="__delarray__">
				<call symbol="b2QueryCallback__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2QueryCallback__ArrayElement" />
			</method>
		</class>
		<class name="b2DistanceJoint">
			<method name="__delarray__">
				<call symbol="b2DistanceJoint__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2DistanceJoint__ArrayElement" />
			</method>
			<method name="GetAnchorA">
				<call symbol="b2DistanceJoint_GetAnchorA">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetReactionTorque">
				<call symbol="b2DistanceJoint_GetReactionTorque">
					<argument name="inv_dt" type="ctypes.c_float" />
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="SetFrequency">
				<call symbol="b2DistanceJoint_SetFrequency">
					<argument name="hz" type="ctypes.c_float" />
				</call>
			</method>
			<method name="GetLength">
				<call symbol="b2DistanceJoint_GetLength">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetDampingRatio">
				<call symbol="b2DistanceJoint_GetDampingRatio">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetFrequency">
				<call symbol="b2DistanceJoint_GetFrequency">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="SetDampingRatio">
				<call symbol="b2DistanceJoint_SetDampingRatio">
					<argument name="ratio" type="ctypes.c_float" />
				</call>
			</method>
			<method name="GetAnchorB">
				<call symbol="b2DistanceJoint_GetAnchorB">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetReactionForce">
				<call symbol="b2DistanceJoint_GetReactionForce">
					<argument name="inv_dt" type="ctypes.c_float" />
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="SetLength">
				<call symbol="b2DistanceJoint_SetLength">
					<argument name="length" type="ctypes.c_float" />
				</call>
			</method>
		</class>
		<class name="b2MassData">
			<method name="__newarray__">
				<call symbol="b2MassData__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2MassData__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2MassData__ArrayElement" />
			</method>
			<member name="mass">
				<getter>
					<call symbol="b2MassData__Get_Mass">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2MassData__Set_Mass">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="center">
				<getter>
					<call symbol="b2MassData__Get_Center">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2MassData__Set_Center">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="I">
				<getter>
					<call symbol="b2MassData__Get_I">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2MassData__Set_I">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2Vec3">
			<method name="__init__">
				<call symbol="b2Vec3__Create0" />
				<call symbol="b2Vec3__Create1">
					<argument name="x" type="ctypes.c_float" />
					<argument name="y" type="ctypes.c_float" />
					<argument name="z" type="ctypes.c_float" />
				</call>
				<call symbol="b2Vec3__Create2">
					<argument name="a" type="Box2D.b2Vec3" />
				</call>
			</method>
			<method name="__newarray__">
				<call symbol="b2Vec3__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2Vec3__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2Vec3__ArrayElement" />
			</method>
			<method name="SetZero">
				<call symbol="b2Vec3_SetZero" />
			</method>
			<method name="Set">
				<call symbol="b2Vec3_Set">
					<argument name="x_" type="ctypes.c_float" />
					<argument name="y_" type="ctypes.c_float" />
					<argument name="z_" type="ctypes.c_float" />
				</call>
			</method>
			<member name="x">
				<getter>
					<call symbol="b2Vec3__Get_X">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Vec3__Set_X">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="y">
				<getter>
					<call symbol="b2Vec3__Get_Y">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Vec3__Set_Y">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="z">
				<getter>
					<call symbol="b2Vec3__Get_Z">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Vec3__Set_Z">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2Profile">
			<method name="__newarray__">
				<call symbol="b2Profile__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2Profile__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2Profile__ArrayElement" />
			</method>
			<member name="step">
				<getter>
					<call symbol="b2Profile__Get_Step">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Profile__Set_Step">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="collide">
				<getter>
					<call symbol="b2Profile__Get_Collide">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Profile__Set_Collide">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="solve">
				<getter>
					<call symbol="b2Profile__Get_Solve">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Profile__Set_Solve">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="solveInit">
				<getter>
					<call symbol="b2Profile__Get_SolveInit">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Profile__Set_SolveInit">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="solveVelocity">
				<getter>
					<call symbol="b2Profile__Get_SolveVelocity">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Profile__Set_SolveVelocity">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="solvePosition">
				<getter>
					<call symbol="b2Profile__Get_SolvePosition">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Profile__Set_SolvePosition">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="broadphase">
				<getter>
					<call symbol="b2Profile__Get_Broadphase">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Profile__Set_Broadphase">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="solveTOI">
				<getter>
					<call symbol="b2Profile__Get_SolveTOI">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Profile__Set_SolveTOI">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2MouseJointDef">
			<method name="__init__">
				<call symbol="b2MouseJointDef__Create" />
			</method>
			<method name="__newarray__">
				<call symbol="b2MouseJointDef__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2MouseJointDef__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2MouseJointDef__ArrayElement" />
			</method>
			<member name="target">
				<getter>
					<call symbol="b2MouseJointDef__Get_Target">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2MouseJointDef__Set_Target">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="maxForce">
				<getter>
					<call symbol="b2MouseJointDef__Get_MaxForce">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2MouseJointDef__Set_MaxForce">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="frequencyHz">
				<getter>
					<call symbol="b2MouseJointDef__Get_FrequencyHz">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2MouseJointDef__Set_FrequencyHz">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="dampingRatio">
				<getter>
					<call symbol="b2MouseJointDef__Get_DampingRatio">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2MouseJointDef__Set_DampingRatio">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2Position">
			<method name="__newarray__">
				<call symbol="b2Position__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2Position__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2Position__ArrayElement" />
			</method>
			<member name="c">
				<getter>
					<call symbol="b2Position__Get_C">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Position__Set_C">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="a">
				<getter>
					<call symbol="b2Position__Get_A">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Position__Set_A">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2Jacobian">
			<method name="__newarray__">
				<call symbol="b2Jacobian__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2Jacobian__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2Jacobian__ArrayElement" />
			</method>
			<member name="linear">
				<getter>
					<call symbol="b2Jacobian__Get_Linear">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Jacobian__Set_Linear">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="angularA">
				<getter>
					<call symbol="b2Jacobian__Get_AngularA">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Jacobian__Set_AngularA">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="angularB">
				<getter>
					<call symbol="b2Jacobian__Get_AngularB">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Jacobian__Set_AngularB">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2DistanceProxy">
			<method name="__init__">
				<call symbol="b2DistanceProxy__Create" />
			</method>
			<method name="__newarray__">
				<call symbol="b2DistanceProxy__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2DistanceProxy__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2DistanceProxy__ArrayElement" />
			</method>
			<method name="GetVertex">
				<call symbol="b2DistanceProxy_GetVertex">
					<argument name="index" type="ctypes.c_int" />
					<returns type="Box2D.b2Vec2" ownership="0" />
				</call>
			</method>
			<method name="GetSupportVertex">
				<call symbol="b2DistanceProxy_GetSupportVertex">
					<argument name="d" type="Box2D.b2Vec2" />
					<returns type="Box2D.b2Vec2" ownership="0" />
				</call>
			</method>
			<method name="Set">
				<call symbol="b2DistanceProxy_Set">
					<argument name="shape" type="Box2D.b2Shape" />
					<argument name="index" type="ctypes.c_int" />
				</call>
			</method>
			<method name="GetVertexCount">
				<call symbol="b2DistanceProxy_GetVertexCount">
					<returns type="ctypes.c_int" ownership="0" />
				</call>
			</method>
			<method name="GetSupport">
				<call symbol="b2DistanceProxy_GetSupport">
					<argument name="d" type="Box2D.b2Vec2" />
					<returns type="ctypes.c_int" ownership="0" />
				</call>
			</method>
			<member name="m_vertices">
				<getter>
					<call symbol="b2DistanceProxy__Get_MVertices">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2DistanceProxy__Set_MVertices">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="m_count">
				<getter>
					<call symbol="b2DistanceProxy__Get_MCount">
						<returns type="ctypes.c_int" />
					</call>
				</getter>
				<setter>
					<call symbol="b2DistanceProxy__Set_MCount">
						<argument type="ctypes.c_int" />
					</call>
				</setter>
			</member>
			<member name="m_radius">
				<getter>
					<call symbol="b2DistanceProxy__Get_MRadius">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2DistanceProxy__Set_MRadius">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2RopeJoint">
			<method name="__delarray__">
				<call symbol="b2RopeJoint__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2RopeJoint__ArrayElement" />
			</method>
			<method name="GetAnchorA">
				<call symbol="b2RopeJoint_GetAnchorA">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetReactionTorque">
				<call symbol="b2RopeJoint_GetReactionTorque">
					<argument name="inv_dt" type="ctypes.c_float" />
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetMaxLength">
				<call symbol="b2RopeJoint_GetMaxLength">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetAnchorB">
				<call symbol="b2RopeJoint_GetAnchorB">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetReactionForce">
				<call symbol="b2RopeJoint_GetReactionForce">
					<argument name="inv_dt" type="ctypes.c_float" />
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetLimitState">
				<call symbol="b2RopeJoint_GetLimitState">
					<returns type="ctypes.c_uint" ownership="0" />
				</call>
			</method>
		</class>
		<class name="b2DistanceInput">
			<method name="__newarray__">
				<call symbol="b2DistanceInput__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2DistanceInput__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2DistanceInput__ArrayElement" />
			</method>
			<member name="proxyA">
				<getter>
					<call symbol="b2DistanceInput__Get_ProxyA">
						<returns type="Box2D.b2DistanceProxy" />
					</call>
				</getter>
				<setter>
					<call symbol="b2DistanceInput__Set_ProxyA">
						<argument type="Box2D.b2DistanceProxy" />
					</call>
				</setter>
			</member>
			<member name="proxyB">
				<getter>
					<call symbol="b2DistanceInput__Get_ProxyB">
						<returns type="Box2D.b2DistanceProxy" />
					</call>
				</getter>
				<setter>
					<call symbol="b2DistanceInput__Set_ProxyB">
						<argument type="Box2D.b2DistanceProxy" />
					</call>
				</setter>
			</member>
			<member name="transformA">
				<getter>
					<call symbol="b2DistanceInput__Get_TransformA">
						<returns type="Box2D.b2Transform" />
					</call>
				</getter>
				<setter>
					<call symbol="b2DistanceInput__Set_TransformA">
						<argument type="Box2D.b2Transform" />
					</call>
				</setter>
			</member>
			<member name="transformB">
				<getter>
					<call symbol="b2DistanceInput__Get_TransformB">
						<returns type="Box2D.b2Transform" />
					</call>
				</getter>
				<setter>
					<call symbol="b2DistanceInput__Set_TransformB">
						<argument type="Box2D.b2Transform" />
					</call>
				</setter>
			</member>
			<member name="useRadii">
				<getter>
					<call symbol="b2DistanceInput__Get_UseRadii">
						<returns type="ctypes.c_ubyte" />
					</call>
				</getter>
				<setter>
					<call symbol="b2DistanceInput__Set_UseRadii">
						<argument type="ctypes.c_ubyte" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2StackAllocator">
			<method name="__init__">
				<call symbol="b2StackAllocator__Create" />
			</method>
			<method name="__newarray__">
				<call symbol="b2StackAllocator__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2StackAllocator__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2StackAllocator__ArrayElement" />
			</method>
			<method name="GetMaxAllocation">
				<call symbol="b2StackAllocator_GetMaxAllocation">
					<returns type="ctypes.c_int" ownership="0" />
				</call>
			</method>
			<method name="Allocate">
				<call symbol="b2StackAllocator_Allocate">
					<argument name="size" type="ctypes.c_int" />
					<returns type="ctypes.c_void_p" ownership="0" />
				</call>
			</method>
			<method name="Free">
				<call symbol="b2StackAllocator_Free">
					<argument name="p" type="ctypes.c_void_p" />
				</call>
			</method>
		</class>
		<class name="b2WorldManifold">
			<method name="__newarray__">
				<call symbol="b2WorldManifold__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2WorldManifold__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2WorldManifold__ArrayElement" />
			</method>
			<method name="Initialize">
				<call symbol="b2WorldManifold_Initialize">
					<argument name="manifold" type="Box2D.b2Manifold" />
					<argument name="xfA" type="Box2D.b2Transform" />
					<argument name="radiusA" type="ctypes.c_float" />
					<argument name="xfB" type="Box2D.b2Transform" />
					<argument name="radiusB" type="ctypes.c_float" />
				</call>
			</method>
			<member name="normal">
				<getter>
					<call symbol="b2WorldManifold__Get_Normal">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2WorldManifold__Set_Normal">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2GearJointDef">
			<method name="__init__">
				<call symbol="b2GearJointDef__Create" />
			</method>
			<method name="__newarray__">
				<call symbol="b2GearJointDef__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2GearJointDef__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2GearJointDef__ArrayElement" />
			</method>
			<member name="joint1">
				<getter>
					<call symbol="b2GearJointDef__Get_Joint1">
						<returns type="Box2D.b2Joint" />
					</call>
				</getter>
				<setter>
					<call symbol="b2GearJointDef__Set_Joint1">
						<argument type="Box2D.b2Joint" />
					</call>
				</setter>
			</member>
			<member name="joint2">
				<getter>
					<call symbol="b2GearJointDef__Get_Joint2">
						<returns type="Box2D.b2Joint" />
					</call>
				</getter>
				<setter>
					<call symbol="b2GearJointDef__Set_Joint2">
						<argument type="Box2D.b2Joint" />
					</call>
				</setter>
			</member>
			<member name="ratio">
				<getter>
					<call symbol="b2GearJointDef__Get_Ratio">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2GearJointDef__Set_Ratio">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2JointDef">
			<method name="__init__">
				<call symbol="b2JointDef__Create" />
			</method>
			<method name="__newarray__">
				<call symbol="b2JointDef__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2JointDef__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2JointDef__ArrayElement" />
			</method>
			<member name="type">
				<getter>
					<call symbol="b2JointDef__Get_Type">
						<returns type="ctypes.c_uint" />
					</call>
				</getter>
				<setter>
					<call symbol="b2JointDef__Set_Type">
						<argument type="ctypes.c_uint" />
					</call>
				</setter>
			</member>
			<member name="userData">
				<getter>
					<call symbol="b2JointDef__Get_UserData">
						<returns type="ctypes.c_void_p" />
					</call>
				</getter>
				<setter>
					<call symbol="b2JointDef__Set_UserData">
						<argument type="ctypes.c_void_p" />
					</call>
				</setter>
			</member>
			<member name="bodyA">
				<getter>
					<call symbol="b2JointDef__Get_BodyA">
						<returns type="Box2D.b2Body" />
					</call>
				</getter>
				<setter>
					<call symbol="b2JointDef__Set_BodyA">
						<argument type="Box2D.b2Body" />
					</call>
				</setter>
			</member>
			<member name="bodyB">
				<getter>
					<call symbol="b2JointDef__Get_BodyB">
						<returns type="Box2D.b2Body" />
					</call>
				</getter>
				<setter>
					<call symbol="b2JointDef__Set_BodyB">
						<argument type="Box2D.b2Body" />
					</call>
				</setter>
			</member>
			<member name="collideConnected">
				<getter>
					<call symbol="b2JointDef__Get_CollideConnected">
						<returns type="ctypes.c_ubyte" />
					</call>
				</getter>
				<setter>
					<call symbol="b2JointDef__Set_CollideConnected">
						<argument type="ctypes.c_ubyte" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2GearJoint">
			<method name="__delarray__">
				<call symbol="b2GearJoint__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2GearJoint__ArrayElement" />
			</method>
			<method name="GetAnchorA">
				<call symbol="b2GearJoint_GetAnchorA">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetReactionTorque">
				<call symbol="b2GearJoint_GetReactionTorque">
					<argument name="inv_dt" type="ctypes.c_float" />
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="SetRatio">
				<call symbol="b2GearJoint_SetRatio">
					<argument name="ratio" type="ctypes.c_float" />
				</call>
			</method>
			<method name="GetRatio">
				<call symbol="b2GearJoint_GetRatio">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetReactionForce">
				<call symbol="b2GearJoint_GetReactionForce">
					<argument name="inv_dt" type="ctypes.c_float" />
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetAnchorB">
				<call symbol="b2GearJoint_GetAnchorB">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
		</class>
		<class name="b2ManifoldPoint">
			<method name="__newarray__">
				<call symbol="b2ManifoldPoint__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2ManifoldPoint__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2ManifoldPoint__ArrayElement" />
			</method>
			<member name="localPoint">
				<getter>
					<call symbol="b2ManifoldPoint__Get_LocalPoint">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2ManifoldPoint__Set_LocalPoint">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="normalImpulse">
				<getter>
					<call symbol="b2ManifoldPoint__Get_NormalImpulse">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2ManifoldPoint__Set_NormalImpulse">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="tangentImpulse">
				<getter>
					<call symbol="b2ManifoldPoint__Get_TangentImpulse">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2ManifoldPoint__Set_TangentImpulse">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2RevoluteJointDef">
			<method name="__init__">
				<call symbol="b2RevoluteJointDef__Create" />
			</method>
			<method name="__newarray__">
				<call symbol="b2RevoluteJointDef__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2RevoluteJointDef__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2RevoluteJointDef__ArrayElement" />
			</method>
			<method name="Initialize">
				<call symbol="b2RevoluteJointDef_Initialize">
					<argument name="bodyA" type="Box2D.b2Body" />
					<argument name="bodyB" type="Box2D.b2Body" />
					<argument name="anchor" type="Box2D.b2Vec2" />
				</call>
			</method>
			<member name="localAnchorA">
				<getter>
					<call symbol="b2RevoluteJointDef__Get_LocalAnchorA">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2RevoluteJointDef__Set_LocalAnchorA">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="localAnchorB">
				<getter>
					<call symbol="b2RevoluteJointDef__Get_LocalAnchorB">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2RevoluteJointDef__Set_LocalAnchorB">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="referenceAngle">
				<getter>
					<call symbol="b2RevoluteJointDef__Get_ReferenceAngle">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2RevoluteJointDef__Set_ReferenceAngle">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="enableLimit">
				<getter>
					<call symbol="b2RevoluteJointDef__Get_EnableLimit">
						<returns type="ctypes.c_ubyte" />
					</call>
				</getter>
				<setter>
					<call symbol="b2RevoluteJointDef__Set_EnableLimit">
						<argument type="ctypes.c_ubyte" />
					</call>
				</setter>
			</member>
			<member name="lowerAngle">
				<getter>
					<call symbol="b2RevoluteJointDef__Get_LowerAngle">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2RevoluteJointDef__Set_LowerAngle">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="upperAngle">
				<getter>
					<call symbol="b2RevoluteJointDef__Get_UpperAngle">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2RevoluteJointDef__Set_UpperAngle">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="enableMotor">
				<getter>
					<call symbol="b2RevoluteJointDef__Get_EnableMotor">
						<returns type="ctypes.c_ubyte" />
					</call>
				</getter>
				<setter>
					<call symbol="b2RevoluteJointDef__Set_EnableMotor">
						<argument type="ctypes.c_ubyte" />
					</call>
				</setter>
			</member>
			<member name="motorSpeed">
				<getter>
					<call symbol="b2RevoluteJointDef__Get_MotorSpeed">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2RevoluteJointDef__Set_MotorSpeed">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="maxMotorTorque">
				<getter>
					<call symbol="b2RevoluteJointDef__Get_MaxMotorTorque">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2RevoluteJointDef__Set_MaxMotorTorque">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2Transform">
			<method name="__init__">
				<call symbol="b2Transform__Create0" />
				<call symbol="b2Transform__Create1">
					<argument name="position" type="Box2D.b2Vec2" />
					<argument name="rotation" type="Box2D.b2Rot" />
				</call>
			</method>
			<method name="__newarray__">
				<call symbol="b2Transform__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2Transform__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2Transform__ArrayElement" />
			</method>
			<method name="Set">
				<call symbol="b2Transform_Set">
					<argument name="position" type="Box2D.b2Vec2" />
					<argument name="angle" type="ctypes.c_float" />
				</call>
			</method>
			<method name="SetIdentity">
				<call symbol="b2Transform_SetIdentity" />
			</method>
			<member name="p">
				<getter>
					<call symbol="b2Transform__Get_P">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Transform__Set_P">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="q">
				<getter>
					<call symbol="b2Transform__Get_Q">
						<returns type="Box2D.b2Rot" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Transform__Set_Q">
						<argument type="Box2D.b2Rot" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2WeldJoint">
			<method name="__delarray__">
				<call symbol="b2WeldJoint__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2WeldJoint__ArrayElement" />
			</method>
			<method name="GetAnchorA">
				<call symbol="b2WeldJoint_GetAnchorA">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetReactionTorque">
				<call symbol="b2WeldJoint_GetReactionTorque">
					<argument name="inv_dt" type="ctypes.c_float" />
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetAnchorB">
				<call symbol="b2WeldJoint_GetAnchorB">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetReactionForce">
				<call symbol="b2WeldJoint_GetReactionForce">
					<argument name="inv_dt" type="ctypes.c_float" />
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
		</class>
		<class name="b2Fixture">
			<method name="__delarray__">
				<call symbol="b2Fixture__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2Fixture__ArrayElement" />
			</method>
			<method name="GetRestitution">
				<call symbol="b2Fixture_GetRestitution">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="SetFilterData">
				<call symbol="b2Fixture_SetFilterData">
					<argument name="filter" type="Box2D.b2Filter" />
				</call>
			</method>
			<method name="SetFriction">
				<call symbol="b2Fixture_SetFriction">
					<argument name="friction" type="ctypes.c_float" />
				</call>
			</method>
			<method name="GetShape">
				<call symbol="b2Fixture_GetShape0">
					<returns type="Box2D.b2Shape" ownership="0" />
				</call>
				<call symbol="b2Fixture_GetShape1">
					<returns type="Box2D.b2Shape" ownership="0" />
				</call>
			</method>
			<method name="SetRestitution">
				<call symbol="b2Fixture_SetRestitution">
					<argument name="restitution" type="ctypes.c_float" />
				</call>
			</method>
			<method name="GetBody">
				<call symbol="b2Fixture_GetBody0">
					<returns type="Box2D.b2Body" ownership="0" />
				</call>
				<call symbol="b2Fixture_GetBody1">
					<returns type="Box2D.b2Body" ownership="0" />
				</call>
			</method>
			<method name="GetNext">
				<call symbol="b2Fixture_GetNext0">
					<returns type="Box2D.b2Fixture" ownership="0" />
				</call>
				<call symbol="b2Fixture_GetNext1">
					<returns type="Box2D.b2Fixture" ownership="0" />
				</call>
			</method>
			<method name="GetFriction">
				<call symbol="b2Fixture_GetFriction">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetUserData">
				<call symbol="b2Fixture_GetUserData">
					<returns type="ctypes.c_void_p" ownership="0" />
				</call>
			</method>
			<method name="SetDensity">
				<call symbol="b2Fixture_SetDensity">
					<argument name="density" type="ctypes.c_float" />
				</call>
			</method>
			<method name="GetMassData">
				<call symbol="b2Fixture_GetMassData">
					<argument name="massData" type="Box2D.b2MassData" />
				</call>
			</method>
			<method name="SetSensor">
				<call symbol="b2Fixture_SetSensor">
					<argument name="sensor" type="ctypes.c_ubyte" />
				</call>
			</method>
			<method name="GetAABB">
				<call symbol="b2Fixture_GetAABB">
					<argument name="childIndex" type="ctypes.c_int" />
					<returns type="Box2D.b2AABB" ownership="0" />
				</call>
			</method>
			<method name="TestPoint">
				<call symbol="b2Fixture_TestPoint">
					<argument name="p" type="Box2D.b2Vec2" />
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="SetUserData">
				<call symbol="b2Fixture_SetUserData">
					<argument name="data" type="ctypes.c_void_p" />
				</call>
			</method>
			<method name="RayCast">
				<call symbol="b2Fixture_RayCast">
					<argument name="output" type="Box2D.b2RayCastOutput" />
					<argument name="input" type="Box2D.b2RayCastInput" />
					<argument name="childIndex" type="ctypes.c_int" />
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="Refilter">
				<call symbol="b2Fixture_Refilter" />
			</method>
			<method name="GetFilterData">
				<call symbol="b2Fixture_GetFilterData">
					<returns type="Box2D.b2Filter" ownership="0" />
				</call>
			</method>
			<method name="IsSensor">
				<call symbol="b2Fixture_IsSensor">
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="GetType">
				<call symbol="b2Fixture_GetType">
					<returns type="ctypes.c_uint" ownership="0" />
				</call>
			</method>
			<method name="GetDensity">
				<call symbol="b2Fixture_GetDensity">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
		</class>
		<class name="b2Manifold">
			<method name="__newarray__">
				<call symbol="b2Manifold__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2Manifold__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2Manifold__ArrayElement" />
			</method>
			<member name="localNormal">
				<getter>
					<call symbol="b2Manifold__Get_LocalNormal">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Manifold__Set_LocalNormal">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="localPoint">
				<getter>
					<call symbol="b2Manifold__Get_LocalPoint">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Manifold__Set_LocalPoint">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="type">
				<getter>
					<call symbol="b2Manifold__Get_Type">
						<returns type="ctypes.c_uint" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Manifold__Set_Type">
						<argument type="ctypes.c_uint" />
					</call>
				</setter>
			</member>
			<member name="pointCount">
				<getter>
					<call symbol="b2Manifold__Get_PointCount">
						<returns type="ctypes.c_int" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Manifold__Set_PointCount">
						<argument type="ctypes.c_int" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2WeldJointDef">
			<method name="__init__">
				<call symbol="b2WeldJointDef__Create" />
			</method>
			<method name="__newarray__">
				<call symbol="b2WeldJointDef__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2WeldJointDef__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2WeldJointDef__ArrayElement" />
			</method>
			<method name="Initialize">
				<call symbol="b2WeldJointDef_Initialize">
					<argument name="body1" type="Box2D.b2Body" />
					<argument name="body2" type="Box2D.b2Body" />
					<argument name="anchor" type="Box2D.b2Vec2" />
				</call>
			</method>
			<member name="localAnchorA">
				<getter>
					<call symbol="b2WeldJointDef__Get_LocalAnchorA">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2WeldJointDef__Set_LocalAnchorA">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="localAnchorB">
				<getter>
					<call symbol="b2WeldJointDef__Get_LocalAnchorB">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2WeldJointDef__Set_LocalAnchorB">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="referenceAngle">
				<getter>
					<call symbol="b2WeldJointDef__Get_ReferenceAngle">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2WeldJointDef__Set_ReferenceAngle">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2PrismaticJointDef">
			<method name="__init__">
				<call symbol="b2PrismaticJointDef__Create" />
			</method>
			<method name="__newarray__">
				<call symbol="b2PrismaticJointDef__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2PrismaticJointDef__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2PrismaticJointDef__ArrayElement" />
			</method>
			<method name="Initialize">
				<call symbol="b2PrismaticJointDef_Initialize">
					<argument name="bodyA" type="Box2D.b2Body" />
					<argument name="bodyB" type="Box2D.b2Body" />
					<argument name="anchor" type="Box2D.b2Vec2" />
					<argument name="axis" type="Box2D.b2Vec2" />
				</call>
			</method>
			<member name="localAnchorA">
				<getter>
					<call symbol="b2PrismaticJointDef__Get_LocalAnchorA">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2PrismaticJointDef__Set_LocalAnchorA">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="localAnchorB">
				<getter>
					<call symbol="b2PrismaticJointDef__Get_LocalAnchorB">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2PrismaticJointDef__Set_LocalAnchorB">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="localAxisA">
				<getter>
					<call symbol="b2PrismaticJointDef__Get_LocalAxisA">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2PrismaticJointDef__Set_LocalAxisA">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="referenceAngle">
				<getter>
					<call symbol="b2PrismaticJointDef__Get_ReferenceAngle">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2PrismaticJointDef__Set_ReferenceAngle">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="enableLimit">
				<getter>
					<call symbol="b2PrismaticJointDef__Get_EnableLimit">
						<returns type="ctypes.c_ubyte" />
					</call>
				</getter>
				<setter>
					<call symbol="b2PrismaticJointDef__Set_EnableLimit">
						<argument type="ctypes.c_ubyte" />
					</call>
				</setter>
			</member>
			<member name="lowerTranslation">
				<getter>
					<call symbol="b2PrismaticJointDef__Get_LowerTranslation">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2PrismaticJointDef__Set_LowerTranslation">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="upperTranslation">
				<getter>
					<call symbol="b2PrismaticJointDef__Get_UpperTranslation">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2PrismaticJointDef__Set_UpperTranslation">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="enableMotor">
				<getter>
					<call symbol="b2PrismaticJointDef__Get_EnableMotor">
						<returns type="ctypes.c_ubyte" />
					</call>
				</getter>
				<setter>
					<call symbol="b2PrismaticJointDef__Set_EnableMotor">
						<argument type="ctypes.c_ubyte" />
					</call>
				</setter>
			</member>
			<member name="maxMotorForce">
				<getter>
					<call symbol="b2PrismaticJointDef__Get_MaxMotorForce">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2PrismaticJointDef__Set_MaxMotorForce">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="motorSpeed">
				<getter>
					<call symbol="b2PrismaticJointDef__Get_MotorSpeed">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2PrismaticJointDef__Set_MotorSpeed">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2RayCastInput">
			<method name="__newarray__">
				<call symbol="b2RayCastInput__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2RayCastInput__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2RayCastInput__ArrayElement" />
			</method>
			<member name="p1">
				<getter>
					<call symbol="b2RayCastInput__Get_P1">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2RayCastInput__Set_P1">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="p2">
				<getter>
					<call symbol="b2RayCastInput__Get_P2">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2RayCastInput__Set_P2">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="maxFraction">
				<getter>
					<call symbol="b2RayCastInput__Get_MaxFraction">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2RayCastInput__Set_MaxFraction">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2Joint">
			<method name="__arrayitem__">
				<call symbol="b2Joint__ArrayElement" />
			</method>
			<method name="GetNext">
				<call symbol="b2Joint_GetNext0">
					<returns type="Box2D.b2Joint" ownership="0" />
				</call>
				<call symbol="b2Joint_GetNext1">
					<returns type="Box2D.b2Joint" ownership="0" />
				</call>
			</method>
			<method name="GetBodyA">
				<call symbol="b2Joint_GetBodyA">
					<returns type="Box2D.b2Body" ownership="0" />
				</call>
			</method>
			<method name="GetBodyB">
				<call symbol="b2Joint_GetBodyB">
					<returns type="Box2D.b2Body" ownership="0" />
				</call>
			</method>
			<method name="GetUserData">
				<call symbol="b2Joint_GetUserData">
					<returns type="ctypes.c_void_p" ownership="0" />
				</call>
			</method>
			<method name="GetType">
				<call symbol="b2Joint_GetType">
					<returns type="ctypes.c_uint" ownership="0" />
				</call>
			</method>
			<method name="SetUserData">
				<call symbol="b2Joint_SetUserData">
					<argument name="data" type="ctypes.c_void_p" />
				</call>
			</method>
			<method name="GetCollideConnected">
				<call symbol="b2Joint_GetCollideConnected">
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="IsActive">
				<call symbol="b2Joint_IsActive">
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
		</class>
		<class name="b2MouseJoint">
			<method name="__delarray__">
				<call symbol="b2MouseJoint__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2MouseJoint__ArrayElement" />
			</method>
			<method name="SetDampingRatio">
				<call symbol="b2MouseJoint_SetDampingRatio">
					<argument name="ratio" type="ctypes.c_float" />
				</call>
			</method>
			<method name="GetAnchorA">
				<call symbol="b2MouseJoint_GetAnchorA">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetReactionTorque">
				<call symbol="b2MouseJoint_GetReactionTorque">
					<argument name="inv_dt" type="ctypes.c_float" />
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="SetFrequency">
				<call symbol="b2MouseJoint_SetFrequency">
					<argument name="hz" type="ctypes.c_float" />
				</call>
			</method>
			<method name="GetDampingRatio">
				<call symbol="b2MouseJoint_GetDampingRatio">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="SetTarget">
				<call symbol="b2MouseJoint_SetTarget">
					<argument name="target" type="Box2D.b2Vec2" />
				</call>
			</method>
			<method name="SetMaxForce">
				<call symbol="b2MouseJoint_SetMaxForce">
					<argument name="force" type="ctypes.c_float" />
				</call>
			</method>
			<method name="GetFrequency">
				<call symbol="b2MouseJoint_GetFrequency">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetTarget">
				<call symbol="b2MouseJoint_GetTarget">
					<returns type="Box2D.b2Vec2" ownership="0" />
				</call>
			</method>
			<method name="GetMaxForce">
				<call symbol="b2MouseJoint_GetMaxForce">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetAnchorB">
				<call symbol="b2MouseJoint_GetAnchorB">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetReactionForce">
				<call symbol="b2MouseJoint_GetReactionForce">
					<argument name="inv_dt" type="ctypes.c_float" />
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
		</class>
		<class name="b2ContactFeature">
			<method name="__newarray__">
				<call symbol="b2ContactFeature__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2ContactFeature__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2ContactFeature__ArrayElement" />
			</method>
			<member name="indexA">
				<getter>
					<call symbol="b2ContactFeature__Get_IndexA">
						<returns type="ctypes.c_ubyte" />
					</call>
				</getter>
				<setter>
					<call symbol="b2ContactFeature__Set_IndexA">
						<argument type="ctypes.c_ubyte" />
					</call>
				</setter>
			</member>
			<member name="indexB">
				<getter>
					<call symbol="b2ContactFeature__Get_IndexB">
						<returns type="ctypes.c_ubyte" />
					</call>
				</getter>
				<setter>
					<call symbol="b2ContactFeature__Set_IndexB">
						<argument type="ctypes.c_ubyte" />
					</call>
				</setter>
			</member>
			<member name="typeA">
				<getter>
					<call symbol="b2ContactFeature__Get_TypeA">
						<returns type="ctypes.c_ubyte" />
					</call>
				</getter>
				<setter>
					<call symbol="b2ContactFeature__Set_TypeA">
						<argument type="ctypes.c_ubyte" />
					</call>
				</setter>
			</member>
			<member name="typeB">
				<getter>
					<call symbol="b2ContactFeature__Get_TypeB">
						<returns type="ctypes.c_ubyte" />
					</call>
				</getter>
				<setter>
					<call symbol="b2ContactFeature__Set_TypeB">
						<argument type="ctypes.c_ubyte" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2BlockAllocator">
			<method name="__init__">
				<call symbol="b2BlockAllocator__Create" />
			</method>
			<method name="__newarray__">
				<call symbol="b2BlockAllocator__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2BlockAllocator__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2BlockAllocator__ArrayElement" />
			</method>
			<method name="Clear">
				<call symbol="b2BlockAllocator_Clear" />
			</method>
			<method name="Allocate">
				<call symbol="b2BlockAllocator_Allocate">
					<argument name="size" type="ctypes.c_int" />
					<returns type="ctypes.c_void_p" ownership="0" />
				</call>
			</method>
			<method name="Free">
				<call symbol="b2BlockAllocator_Free">
					<argument name="p" type="ctypes.c_void_p" />
					<argument name="size" type="ctypes.c_int" />
				</call>
			</method>
		</class>
		<class name="b2SimplexCache">
			<method name="__newarray__">
				<call symbol="b2SimplexCache__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2SimplexCache__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2SimplexCache__ArrayElement" />
			</method>
			<member name="metric">
				<getter>
					<call symbol="b2SimplexCache__Get_Metric">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2SimplexCache__Set_Metric">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="count">
				<getter>
					<call symbol="b2SimplexCache__Get_Count">
						<returns type="ctypes.c_ushort" />
					</call>
				</getter>
				<setter>
					<call symbol="b2SimplexCache__Set_Count">
						<argument type="ctypes.c_ushort" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2PolygonShape">
			<method name="__init__">
				<call symbol="b2PolygonShape__Create" />
			</method>
			<method name="__newarray__">
				<call symbol="b2PolygonShape__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2PolygonShape__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2PolygonShape__ArrayElement" />
			</method>
			<method name="Set">
				<call symbol="b2PolygonShape_Set">
					<argument name="vertices" type="Box2D.b2Vec2" />
					<argument name="vertexCount" type="ctypes.c_int" />
				</call>
			</method>
			<method name="ComputeMass">
				<call symbol="b2PolygonShape_ComputeMass">
					<argument name="massData" type="Box2D.b2MassData" />
					<argument name="density" type="ctypes.c_float" />
				</call>
			</method>
			<method name="Clone">
				<call symbol="b2PolygonShape_Clone">
					<argument name="allocator" type="Box2D.b2BlockAllocator" />
					<returns type="Box2D.b2Shape" ownership="0" />
				</call>
			</method>
			<method name="GetVertex">
				<call symbol="b2PolygonShape_GetVertex">
					<argument name="index" type="ctypes.c_int" />
					<returns type="Box2D.b2Vec2" ownership="0" />
				</call>
			</method>
			<method name="RayCast">
				<call symbol="b2PolygonShape_RayCast">
					<argument name="output" type="Box2D.b2RayCastOutput" />
					<argument name="input" type="Box2D.b2RayCastInput" />
					<argument name="transform" type="Box2D.b2Transform" />
					<argument name="childIndex" type="ctypes.c_int" />
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="ComputeAABB">
				<call symbol="b2PolygonShape_ComputeAABB">
					<argument name="aabb" type="Box2D.b2AABB" />
					<argument name="transform" type="Box2D.b2Transform" />
					<argument name="childIndex" type="ctypes.c_int" />
				</call>
			</method>
			<method name="GetVertexCount">
				<call symbol="b2PolygonShape_GetVertexCount">
					<returns type="ctypes.c_int" ownership="0" />
				</call>
			</method>
			<method name="GetChildCount">
				<call symbol="b2PolygonShape_GetChildCount">
					<returns type="ctypes.c_int" ownership="0" />
				</call>
			</method>
			<method name="TestPoint">
				<call symbol="b2PolygonShape_TestPoint">
					<argument name="transform" type="Box2D.b2Transform" />
					<argument name="p" type="Box2D.b2Vec2" />
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="SetAsBox">
				<call symbol="b2PolygonShape_SetAsBox0">
					<argument name="hx" type="ctypes.c_float" />
					<argument name="hy" type="ctypes.c_float" />
				</call>
				<call symbol="b2PolygonShape_SetAsBox1">
					<argument name="hx" type="ctypes.c_float" />
					<argument name="hy" type="ctypes.c_float" />
					<argument name="center" type="Box2D.b2Vec2" />
					<argument name="angle" type="ctypes.c_float" />
				</call>
			</method>
			<member name="m_centroid">
				<getter>
					<call symbol="b2PolygonShape__Get_MCentroid">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2PolygonShape__Set_MCentroid">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="m_vertexCount">
				<getter>
					<call symbol="b2PolygonShape__Get_MVertexCount">
						<returns type="ctypes.c_int" />
					</call>
				</getter>
				<setter>
					<call symbol="b2PolygonShape__Set_MVertexCount">
						<argument type="ctypes.c_int" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2JointEdge">
			<method name="__newarray__">
				<call symbol="b2JointEdge__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2JointEdge__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2JointEdge__ArrayElement" />
			</method>
			<member name="other">
				<getter>
					<call symbol="b2JointEdge__Get_Other">
						<returns type="Box2D.b2Body" />
					</call>
				</getter>
				<setter>
					<call symbol="b2JointEdge__Set_Other">
						<argument type="Box2D.b2Body" />
					</call>
				</setter>
			</member>
			<member name="prev">
				<getter>
					<call symbol="b2JointEdge__Get_Prev">
						<returns type="Box2D.b2JointEdge" />
					</call>
				</getter>
				<setter>
					<call symbol="b2JointEdge__Set_Prev">
						<argument type="Box2D.b2JointEdge" />
					</call>
				</setter>
			</member>
			<member name="next">
				<getter>
					<call symbol="b2JointEdge__Get_Next">
						<returns type="Box2D.b2JointEdge" />
					</call>
				</getter>
				<setter>
					<call symbol="b2JointEdge__Set_Next">
						<argument type="Box2D.b2JointEdge" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2Velocity">
			<method name="__newarray__">
				<call symbol="b2Velocity__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2Velocity__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2Velocity__ArrayElement" />
			</method>
			<member name="v">
				<getter>
					<call symbol="b2Velocity__Get_V">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Velocity__Set_V">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="w">
				<getter>
					<call symbol="b2Velocity__Get_W">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2Velocity__Set_W">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2FrictionJoint">
			<method name="__delarray__">
				<call symbol="b2FrictionJoint__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2FrictionJoint__ArrayElement" />
			</method>
			<method name="SetMaxTorque">
				<call symbol="b2FrictionJoint_SetMaxTorque">
					<argument name="torque" type="ctypes.c_float" />
				</call>
			</method>
			<method name="GetAnchorA">
				<call symbol="b2FrictionJoint_GetAnchorA">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetReactionTorque">
				<call symbol="b2FrictionJoint_GetReactionTorque">
					<argument name="inv_dt" type="ctypes.c_float" />
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="SetMaxForce">
				<call symbol="b2FrictionJoint_SetMaxForce">
					<argument name="force" type="ctypes.c_float" />
				</call>
			</method>
			<method name="GetMaxForce">
				<call symbol="b2FrictionJoint_GetMaxForce">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
			<method name="GetAnchorB">
				<call symbol="b2FrictionJoint_GetAnchorB">
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetReactionForce">
				<call symbol="b2FrictionJoint_GetReactionForce">
					<argument name="inv_dt" type="ctypes.c_float" />
					<returns type="Box2D.b2Vec2" ownership="1" />
				</call>
			</method>
			<method name="GetMaxTorque">
				<call symbol="b2FrictionJoint_GetMaxTorque">
					<returns type="ctypes.c_float" ownership="0" />
				</call>
			</method>
		</class>
		<class name="b2ContactRegister">
			<method name="__newarray__">
				<call symbol="b2ContactRegister__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2ContactRegister__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2ContactRegister__ArrayElement" />
			</method>
			<member name="primary">
				<getter>
					<call symbol="b2ContactRegister__Get_Primary">
						<returns type="ctypes.c_ubyte" />
					</call>
				</getter>
				<setter>
					<call symbol="b2ContactRegister__Set_Primary">
						<argument type="ctypes.c_ubyte" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2ContactFilter">
			<method name="__newarray__">
				<call symbol="b2ContactFilter__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2ContactFilter__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2ContactFilter__ArrayElement" />
			</method>
			<method name="ShouldCollide">
				<call symbol="b2ContactFilter_ShouldCollide">
					<argument name="fixtureA" type="Box2D.b2Fixture" />
					<argument name="fixtureB" type="Box2D.b2Fixture" />
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
		</class>
		<class name="b2WheelJointDef">
			<method name="__init__">
				<call symbol="b2WheelJointDef__Create" />
			</method>
			<method name="__newarray__">
				<call symbol="b2WheelJointDef__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2WheelJointDef__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2WheelJointDef__ArrayElement" />
			</method>
			<method name="Initialize">
				<call symbol="b2WheelJointDef_Initialize">
					<argument name="bodyA" type="Box2D.b2Body" />
					<argument name="bodyB" type="Box2D.b2Body" />
					<argument name="anchor" type="Box2D.b2Vec2" />
					<argument name="axis" type="Box2D.b2Vec2" />
				</call>
			</method>
			<member name="localAnchorA">
				<getter>
					<call symbol="b2WheelJointDef__Get_LocalAnchorA">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2WheelJointDef__Set_LocalAnchorA">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="localAnchorB">
				<getter>
					<call symbol="b2WheelJointDef__Get_LocalAnchorB">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2WheelJointDef__Set_LocalAnchorB">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="localAxisA">
				<getter>
					<call symbol="b2WheelJointDef__Get_LocalAxisA">
						<returns type="Box2D.b2Vec2" />
					</call>
				</getter>
				<setter>
					<call symbol="b2WheelJointDef__Set_LocalAxisA">
						<argument type="Box2D.b2Vec2" />
					</call>
				</setter>
			</member>
			<member name="enableMotor">
				<getter>
					<call symbol="b2WheelJointDef__Get_EnableMotor">
						<returns type="ctypes.c_ubyte" />
					</call>
				</getter>
				<setter>
					<call symbol="b2WheelJointDef__Set_EnableMotor">
						<argument type="ctypes.c_ubyte" />
					</call>
				</setter>
			</member>
			<member name="maxMotorTorque">
				<getter>
					<call symbol="b2WheelJointDef__Get_MaxMotorTorque">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2WheelJointDef__Set_MaxMotorTorque">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="motorSpeed">
				<getter>
					<call symbol="b2WheelJointDef__Get_MotorSpeed">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2WheelJointDef__Set_MotorSpeed">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="frequencyHz">
				<getter>
					<call symbol="b2WheelJointDef__Get_FrequencyHz">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2WheelJointDef__Set_FrequencyHz">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="dampingRatio">
				<getter>
					<call symbol="b2WheelJointDef__Get_DampingRatio">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2WheelJointDef__Set_DampingRatio">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
		</class>
		<class name="b2ContactListener">
			<method name="__newarray__">
				<call symbol="b2ContactListener__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2ContactListener__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2ContactListener__ArrayElement" />
			</method>
			<method name="EndContact">
				<call symbol="b2ContactListener_EndContact">
					<argument name="contact" type="Box2D.b2Contact" />
				</call>
			</method>
			<method name="PreSolve">
				<call symbol="b2ContactListener_PreSolve">
					<argument name="contact" type="Box2D.b2Contact" />
					<argument name="oldManifold" type="Box2D.b2Manifold" />
				</call>
			</method>
			<method name="BeginContact">
				<call symbol="b2ContactListener_BeginContact">
					<argument name="contact" type="Box2D.b2Contact" />
				</call>
			</method>
			<method name="PostSolve">
				<call symbol="b2ContactListener_PostSolve">
					<argument name="contact" type="Box2D.b2Contact" />
					<argument name="impulse" type="Box2D.b2ContactImpulse" />
				</call>
			</method>
		</class>
		<class name="b2RayCastCallback">
			<method name="__delarray__">
				<call symbol="b2RayCastCallback__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2RayCastCallback__ArrayElement" />
			</method>
		</class>
		<class name="b2LoopShape">
			<method name="__init__">
				<call symbol="b2LoopShape__Create" />
			</method>
			<method name="__newarray__">
				<call symbol="b2LoopShape__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2LoopShape__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2LoopShape__ArrayElement" />
			</method>
			<method name="GetVertices">
				<call symbol="b2LoopShape_GetVertices">
					<returns type="Box2D.b2Vec2" ownership="0" />
				</call>
			</method>
			<method name="ComputeMass">
				<call symbol="b2LoopShape_ComputeMass">
					<argument name="massData" type="Box2D.b2MassData" />
					<argument name="density" type="ctypes.c_float" />
				</call>
			</method>
			<method name="Create">
				<call symbol="b2LoopShape_Create">
					<argument name="vertices" type="Box2D.b2Vec2" />
					<argument name="count" type="ctypes.c_int" />
				</call>
			</method>
			<method name="GetVertex">
				<call symbol="b2LoopShape_GetVertex">
					<argument name="index" type="ctypes.c_int" />
					<returns type="Box2D.b2Vec2" ownership="0" />
				</call>
			</method>
			<method name="GetChildEdge">
				<call symbol="b2LoopShape_GetChildEdge">
					<argument name="edge" type="Box2D.b2EdgeShape" />
					<argument name="index" type="ctypes.c_int" />
				</call>
			</method>
			<method name="RayCast">
				<call symbol="b2LoopShape_RayCast">
					<argument name="output" type="Box2D.b2RayCastOutput" />
					<argument name="input" type="Box2D.b2RayCastInput" />
					<argument name="transform" type="Box2D.b2Transform" />
					<argument name="childIndex" type="ctypes.c_int" />
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="ComputeAABB">
				<call symbol="b2LoopShape_ComputeAABB">
					<argument name="aabb" type="Box2D.b2AABB" />
					<argument name="transform" type="Box2D.b2Transform" />
					<argument name="childIndex" type="ctypes.c_int" />
				</call>
			</method>
			<method name="GetChildCount">
				<call symbol="b2LoopShape_GetChildCount">
					<returns type="ctypes.c_int" ownership="0" />
				</call>
			</method>
			<method name="TestPoint">
				<call symbol="b2LoopShape_TestPoint">
					<argument name="transform" type="Box2D.b2Transform" />
					<argument name="p" type="Box2D.b2Vec2" />
					<returns type="ctypes.c_ubyte" ownership="0" />
				</call>
			</method>
			<method name="GetCount">
				<call symbol="b2LoopShape_GetCount">
					<returns type="ctypes.c_int" ownership="0" />
				</call>
			</method>
			<method name="Clone">
				<call symbol="b2LoopShape_Clone">
					<argument name="allocator" type="Box2D.b2BlockAllocator" />
					<returns type="Box2D.b2Shape" ownership="0" />
				</call>
			</method>
		</class>
		<class name="b2FixtureDef">
			<method name="__init__">
				<call symbol="b2FixtureDef__Create" />
			</method>
			<method name="__newarray__">
				<call symbol="b2FixtureDef__CreateArray" />
			</method>
			<method name="__delarray__">
				<call symbol="b2FixtureDef__DestroyArray" />
			</method>
			<method name="__arrayitem__">
				<call symbol="b2FixtureDef__ArrayElement" />
			</method>
			<member name="shape">
				<getter>
					<call symbol="b2FixtureDef__Get_Shape">
						<returns type="Box2D.b2Shape" />
					</call>
				</getter>
				<setter>
					<call symbol="b2FixtureDef__Set_Shape">
						<argument type="Box2D.b2Shape" />
					</call>
				</setter>
			</member>
			<member name="userData">
				<getter>
					<call symbol="b2FixtureDef__Get_UserData">
						<returns type="ctypes.c_void_p" />
					</call>
				</getter>
				<setter>
					<call symbol="b2FixtureDef__Set_UserData">
						<argument type="ctypes.c_void_p" />
					</call>
				</setter>
			</member>
			<member name="friction">
				<getter>
					<call symbol="b2FixtureDef__Get_Friction">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2FixtureDef__Set_Friction">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="restitution">
				<getter>
					<call symbol="b2FixtureDef__Get_Restitution">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2FixtureDef__Set_Restitution">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="density">
				<getter>
					<call symbol="b2FixtureDef__Get_Density">
						<returns type="ctypes.c_float" />
					</call>
				</getter>
				<setter>
					<call symbol="b2FixtureDef__Set_Density">
						<argument type="ctypes.c_float" />
					</call>
				</setter>
			</member>
			<member name="isSensor">
				<getter>
					<call symbol="b2FixtureDef__Get_IsSensor">
						<returns type="ctypes.c_ubyte" />
					</call>
				</getter>
				<setter>
					<call symbol="b2FixtureDef__Set_IsSensor">
						<argument type="ctypes.c_ubyte" />
					</call>
				</setter>
			</member>
			<member name="filter">
				<getter>
					<call symbol="b2FixtureDef__Get_Filter">
						<returns type="Box2D.b2Filter" />
					</call>
				</getter>
				<setter>
					<call symbol="b2FixtureDef__Set_Filter">
						<argument type="Box2D.b2Filter" />
					</call>
				</setter>
			</member>
		</class>
	</package>
</ctypes>